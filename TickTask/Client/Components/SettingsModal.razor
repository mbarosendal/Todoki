@using TickTask.Shared

<BaseModal IsOpen="@IsOpen"
		   IsOpenChanged="@IsOpenChanged"
		   Title="Settings"
		   OnClose="@OnClose">

	<div class="settings-container">
		<!-- Tabs -->
		<div class="settings-tabs">
			<button class="@(ActiveTab == "Timer" ? "active" : "")"
					@onclick="@(() => ActiveTab = "Timer")">
				🕒 Timer
			</button>

			<button class="@(ActiveTab == "Task" ? "active" : "")"
					@onclick="@(() => ActiveTab = "Task")">
				📝 Task
			</button>
		</div>

		<!-- Content -->
		<div class="settings-content">
			@if (ActiveTab == "Timer")
			{
				<div class="settings-section">
					<!-- Duration Inputs -->
					<div class="timer-inputs">
						<div>
							<label>Pomodoro</label>
							<input type="number" min="1" max="999" @bind="PomodoroMinutes" />
						</div>
						<div>
							<label>Short Break</label>
                            <input type="number" min="1" max="999" @bind="ShortBreakMinutes" />
						</div>
						<div>
							<label>Long Break</label>
                            <input type="number" min="1" max="999" @bind="LongBreakMinutes" />
						</div>
					</div>

					<!-- Pomodoros per long break -->
					<div>
						<label>Pomodoros per long break</label>
						<input type="number" min="1" max="99" @bind="RunsBeforeLongBreak" />
					</div>

					<!-- Break Texts -->
					<div>
						<label>Reminder for short breaks</label>
						<input type="text" @bind="ShortBreakTimer.Text" placeholder="E.g. stretch, drink water..." />
					</div>
					<div>
                        <label>Reminder for long breaks</label>
						<input type="text" @bind="LongBreakTimer.Text" placeholder="E.g. snack, walk the dog..." />
					</div>

					<!-- Auto-start options -->
					<div class="switch-row">
						<span>Automatically start timers</span>
						<label class="switch">
							<input type="checkbox" @bind="Settings.IsAutoStart" />
							<span class="slider"></span>
						</label>
					</div>
					<div class="switch-row">
						<span>Start timer after restarts</span>
						<label class="switch">
							<input type="checkbox" @bind="Settings.IsAutoStartAfterRestart" />
							<span class="slider"></span>
						</label>
					</div>
				</div>
			}
			else
			{
				<div class="settings-section">
					<div class="switch-row">
						<span>Automatically mark tasks as done</span>
						<label class="switch">
							<input type="checkbox" @bind="Settings.AutomaticallyMarkDoneTasks" />
							<span class="slider"></span>
						</label>
					</div>
					<div class="switch-row">
						<span>Proceed to next task automatically</span>
						<label class="switch">
							<input type="checkbox" @bind="Settings.AutomaticallyProceedToNextTaskAfterDone" />
							<span class="slider"></span>
						</label>
					</div>
				</div>
			}
		</div>
	</div>
</BaseModal>

@code {
	private string ActiveTab { get; set; } = "Timer";

	[Parameter] public bool IsOpen { get; set; }
	[Parameter] public EventCallback<bool> IsOpenChanged { get; set; }
	[Parameter] public EventCallback OnClose { get; set; }

	[Parameter] public TimerSettings Settings { get; set; } = default!;
	[Parameter] public CountdownTimer PomodoroTimer { get; set; } = default!;
	[Parameter] public CountdownTimer ShortBreakTimer { get; set; } = default!;
	[Parameter] public CountdownTimer LongBreakTimer { get; set; } = default!;

    private int PomodoroMinutes
    {
        get => (int)PomodoroTimer.Duration.TotalMinutes;
        set => PomodoroTimer.Duration = TimeSpan.FromMinutes(Math.Max(1, Math.Min(999, value)));
    }

    private int ShortBreakMinutes
    {
        get => (int)ShortBreakTimer.Duration.TotalMinutes;
        set => ShortBreakTimer.Duration = TimeSpan.FromMinutes(Math.Max(1, Math.Min(999, value)));
    }

    private int LongBreakMinutes
    {
        get => (int)LongBreakTimer.Duration.TotalMinutes;
        set => LongBreakTimer.Duration = TimeSpan.FromMinutes(Math.Max(1, Math.Min(999, value)));
    }

    public int RunsBeforeLongBreak
    {
        get => Settings.RunsBeforeLongBreak;
        set => Settings.RunsBeforeLongBreak = Math.Max(1, Math.Min(99, value));
    }
}


<style>
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background-color: rgba(0, 0, 0, 0.6);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        padding: 20px;
    }

    .modal-content {
        background-color: #121212;
        color: white;
        padding: 1.5rem;
        border-radius: 12px;
        width: 440px;
        max-width: 95vw;
        font-family: sans-serif;
        box-shadow: 0 8px 30px rgba(0, 0, 0, 0.6);
        position: relative;
    }

    .settings-container {
        display: flex;
        flex-direction: column;
        gap: 1.2rem;
    }

    .settings-tabs {
        display: flex;
        overflow: hidden;
        border-radius: 0;
    }

        .settings-tabs button {
            flex: 1;
            padding: 0.7rem 0;
            background: #1e1e1e;
            color: #bbb;
            border: none;
            cursor: pointer;
            font-size: 1rem;
            transition: background 0.2s;
        }

            .settings-tabs button.active {
                background: #4cd137;
                color: black;
                font-weight: 600;
            }

    .settings-content {
        min-height: 300px;
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

    .settings-section {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .timer-inputs {
        display: flex;
        gap: 0.8rem;
    }

        .timer-inputs div {
            flex: 1;
            display: flex;
            flex-direction: column;
        }

    label {
        font-size: 0.9rem;
        color: #ccc;
        margin-bottom: 0.4rem;
        font-weight: 500;
    }

    input[type="number"],
    input[type="text"] {
        background-color: #1e1e1e;
        border: 1px solid #444;
        color: white;
        padding: 0.6rem;
        border-radius: 6px;
        width: 100%;
        box-sizing: border-box;
        font-size: 1rem;
    }

    .switch-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 0.95rem;
    }

    .switch {
        position: relative;
        display: inline-block;
        width: 50px;
        height: 26px;
    }

        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #333;
        transition: .3s;
        border-radius: 13px;
    }

        .slider:before {
            position: absolute;
            content: "";
            height: 20px;
            width: 20px;
            left: 3px;
            bottom: 3px;
            background-color: white;
            transition: .3s;
            border-radius: 50%;
        }

    .switch input:checked + .slider {
        background-color: #4cd137;
    }

        .switch input:checked + .slider:before {
            transform: translateX(24px);
        }
</style>