@using Blazored.LocalStorage
@using TickTask.Data.ViewModels
@using TickTask.Shared.Data.ViewModels

@if (IsOpen)
{
    <div class="modal-overlay" @onclick="CloseModal">
        <div class="modal-content" @onclick:stopPropagation>
            <div class="auth-toggle">
                <button class="@(IsLogin ? "active" : "")" @onclick="() => ToggleLogin(true)">Login</button>
                <button class="@(IsLogin ? "" : "active")" @onclick="() => ToggleLogin(false)">Register</button>
            </div>

            <EditForm Model="@registerModel" OnValidSubmit="@HandleSubmit">
                <DataAnnotationsValidator />

                <InputText placeholder="Email" @bind-Value="registerModel.EmailAddress" />
                <ValidationMessage For="@(() => registerModel.EmailAddress)" />

                <InputText type="password" placeholder="Password" @bind-Value="registerModel.Password" />
                <ValidationMessage For="@(() => registerModel.Password)" />

                @if (!IsLogin)
                {
                    <InputText type="password" placeholder="Confirm Password" @bind-Value="ConfirmPassword" />
                    @if (!string.IsNullOrEmpty(PasswordMismatchError))
                    {
                        <p class="login-error">@PasswordMismatchError</p>
                    }
                }

                <button class="auth-btn" type="submit">@((IsLogin) ? "Login" : "Register")</button>
            </EditForm>

            @if (!string.IsNullOrEmpty(Error))
            {
                <p class="login-error">@Error</p>
            }
        </div>
    </div>
}

@code {
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }
    [Inject] private HttpClientWrapper Http { get; set; }
    [Inject] private ILocalStorageService LocalStorage { get; set; }
    [Inject] private NavigationManager Nav { get; set; }
    [Inject] private JwtAuthenticationStateProvider AuthProvider { get; set; }

    private bool IsLogin = true;
    private RegisterRequest registerModel = new();
    private string ConfirmPassword;
    private string Error;
    private string PasswordMismatchError;

    private void ToggleLogin(bool login)
    {
        IsLogin = login;
        Error = null;
        PasswordMismatchError = null;
        registerModel = new();
        ConfirmPassword = string.Empty;
    }

    private async Task HandleSubmit()
    {
        Error = null;
        PasswordMismatchError = null;

        if (!IsLogin && registerModel.Password != ConfirmPassword)
        {
            PasswordMismatchError = "Passwords do not match.";
            return;
        }

        try
        {
            if (IsLogin)
            {
                var loginData = new { emailAddress = registerModel.EmailAddress, password = registerModel.Password };
                var response = await Http.PostAsJsonAsync("api/authentication/login-user", loginData);
                if (!response.IsSuccessStatusCode)
                {
                    Error = "Invalid credentials";
                    return;
                }
                var authResponse = await Http.ReadFromJsonAsync<AuthResponse>(response);
                if (authResponse?.IsSuccess == true)
                {
                    await LocalStorage.SetItemAsync("authToken", authResponse.Token);
                    await LocalStorage.SetItemAsync("refreshToken", authResponse.RefreshToken);
                    AuthProvider.MarkUserAsAuthenticated(authResponse.Token);
                    Nav.NavigateTo("/", forceLoad: true);
                    await CloseModal();
                }
                else
                {
                    Error = authResponse?.Error ?? "Login failed";
                }
            }
            else
            {
                var response = await Http.PostAsJsonAsync("api/authentication/register-user", registerModel);
                if (response.IsSuccessStatusCode)
                {
                    IsLogin = true;
                    await HandleSubmit(); // login immediately after registration
                }
                else
                {
                    var errorResponse = await Http.ReadFromJsonAsync<ValidationErrorResponse>(response);
                    if (errorResponse?.Errors != null)
                        Error = string.Join("\n", errorResponse.Errors.SelectMany(e => e.Value));
                    else
                        Error = "Registration failed. Please try again.";
                }
            }
        }
        catch (Exception ex)
        {
            Error = ex.Message;
        }
    }

    private async Task CloseModal()
    {
        IsOpen = false;
        await IsOpenChanged.InvokeAsync(IsOpen);
    }

    public class ValidationErrorResponse
    {
        public Dictionary<string, string[]> Errors { get; set; } = new();
    }
}


<style>
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background-color: rgba(0, 0, 0, 0.6);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        padding: 20px;
    }

    .modal-content {
        background-color: #121212;
        color: white;
        padding: 1.5rem;
        border-radius: 12px;
        width: 320px;
        max-width: 95vw;
        font-family: sans-serif;
        box-shadow: 0 8px 30px rgba(0, 0, 0, 0.6);
        position: relative;
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .auth-toggle {
        display: flex;
        gap: 0.5rem;
        margin-bottom: 1rem;
    }

        .auth-toggle button {
            flex: 1;
            padding: 0.6rem;
            border-radius: 6px;
            border: 1px solid #444;
            background: #121212;
            color: white;
            cursor: pointer;
        }

            .auth-toggle button.active {
                background: #4cd137;
                color: black;
                font-weight: 600;
            }

    .modal-content input {
        padding: 0.6rem;
        border-radius: 6px;
        border: 1px solid #444;
        background-color: #121212;
        color: white;
        width: 100%;
        box-sizing: border-box;
    }

    .login-error {
        color: #e74c3c;
        font-size: 0.9rem;
        margin: 0;
        text-align: center;
    }

    .auth-btn {
        background-color: #4cd137;
        color: black;
        border: none;
        padding: 8px 16px;
        font-size: 0.95rem;
        border-radius: 6px;
        cursor: pointer;
        transition: background-color 0.3s, transform 0.2s;
    }

        .auth-btn:hover {
            background-color: #3ab231;
            transform: translateY(-1px);
        }
</style>