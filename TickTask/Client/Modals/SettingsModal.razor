@using TickTask.Client.Services
@using TickTask.Shared.Data
@using TickTask.Shared
@inject IJSRuntime JS
@inject HttpClient _httpClient
@inject ILogger<SettingsModal> Logger
@inject UserSettingsApiService userSettingsApiService


<BaseModal IsOpen="@IsOpen"
		   IsOpenChanged="@IsOpenChanged"
		   Title="Settings"
		   OnClose="@SaveAndClose">

	<div class="settings-container">
		<!-- Tabs -->
		<div class="settings-tabs">
			<button class="@(ActiveTab == "Timer" ? "active" : "")"
					@onclick="@(() => ActiveTab = "Timer")">
				🕒<br /> Timer
			</button>

			<button class="@(ActiveTab == "Task" ? "active" : "")"
					@onclick="@(() => ActiveTab = "Task")">
				📝<br /> Task
			</button>

			<button class="@(ActiveTab == "Shortcuts" ? "active" : "")"
					@onclick="@(() => ActiveTab = "Shortcuts")">
				⌨️<br /> Shortcuts
			</button>

			<!-- Reset Button -->
			<button class="reset-btn" @onclick="ResetToDefaults">
				↺<br /> Reset
			</button>
		</div>

		<!-- Content -->
		<div class="settings-content">
			@if (ActiveTab == "Timer")
			{
				<div class="settings-section">
					<!-- Duration Inputs -->
					<div class="timer-inputs">
						<div>
							<label>Pomodoro</label>
							<input type="number" min="1" max="999" @bind="PomodoroMinutes" />
						</div>
						<div>
							<label>Short Break</label>
							<input type="number" min="1" max="999" @bind="ShortBreakMinutes" />
						</div>
						<div>
							<label>Long Break</label>
							<input type="number" min="1" max="999" @bind="LongBreakMinutes" />
						</div>
					</div>

					<!-- Pomodoros per long break -->
					<div>
						<label>Pomodoros per long break</label>
						<input type="number" min="1" max="99" @bind="Settings.RunsBeforeLongBreak" />
					</div>

					<!-- Break Texts -->
					<div>
						<label>Reminder for short breaks</label>
						<textarea @bind="Settings.ShortBreakText"
								  placeholder="E.g. stretch, get a snack, drink water..."
								  class="reminder-input" />
					</div>
					<div>
						<label>Reminder for long breaks</label>
						<textarea @bind="Settings.LongBreakText"
								  placeholder="E.g. start the laundry, walk the dog..."
								  class="reminder-input" />
					</div>

					<!-- Auto-start options -->
					<div class="switch-row">
						<span>Automatically start timers</span>
						<label class="switch">
							<input type="checkbox" @bind="Settings.IsAutoStart" />
							<span class="slider"></span>
						</label>
					</div>
					<div class="switch-row">
						<span>Start timer after restarts</span>
						<label class="switch">
							<input type="checkbox" @bind="Settings.IsAutoStartAfterRestart" />
							<span class="slider"></span>
						</label>
					</div>
					<div class="switch-row">
						<span>
							Enable browser notifications
							<span class="info-icon" data-title="If notifications are not showing, check that you are allowing them in your OS for your browser">❔</span>
						</span>
						<button class="notify-btn @(Settings.EnableNotifications ? "enabled" : "")"
								@onclick="RequestNotificationPermission"
								title="@(Settings.EnableNotifications ? "Managed via browser settings" : "")">
						</button>
					</div>
				</div>
			}
			@if (ActiveTab == "Task")
			{
				<div class="settings-section">
					<div class="switch-row">
						<span>Proceed to next task automatically</span>
						<label class="switch">
							<input type="checkbox" @bind="Settings.AutomaticallyProceedToNextTaskAfterDone" />
							<span class="slider"></span>
						</label>
					</div>
					<div class="switch-row">
						<span>Automatically mark tasks as done</span>
						<label class="switch">
							<input type="checkbox" @bind="Settings.AutomaticallyMarkDoneTasks" />
							<span class="slider"></span>
						</label>
					</div>
					<div class="switch-row">
						<span>Automatically clear finished tasks</span>
						<label class="switch">
							<input type="checkbox" @bind="Settings.AutomaticallyClearDoneTasks" />
							<span class="slider"></span>
						</label>
					</div>
				</div>
			}
			@if (ActiveTab == "Shortcuts")
			{
				<div class="settings-section shortcuts-section">
					<div class="shortcut-group">
						<h3>General</h3>
						<div class="shortcut-item">
							<span class="shortcut-key">Space</span>
							<span class="shortcut-desc">Start/stop timer</span>
						</div>
						<div class="shortcut-item">
							<span class="shortcut-key">Tab</span>
							<span class="shortcut-desc">Add new task (or edit next task)</span>
						</div>
						<div class="shortcut-item">
							<span class="shortcut-key">Mouse Wheel</span>
							<span class="shortcut-desc">Scroll over task to adjust pomodoros</span>
						</div>
					</div>

					<div class="shortcut-group">
						<h3>While editing tasks</h3>
						<div class="shortcut-item">
							<span class="shortcut-key">↑ ↓</span>
							<span class="shortcut-desc">Adjust pomodoros for task</span>
						</div>
						<div class="shortcut-item">
							<span class="shortcut-key">Shift + ↑ ↓</span>
							<span class="shortcut-desc">Edit previous/next task</span>
						</div>
						<div class="shortcut-item">
							<span class="shortcut-key">Ctrl + ↑ ↓</span>
							<span class="shortcut-desc">Move task up/down</span>
						</div>
					</div>
				</div>
			}
		</div>
	</div>
</BaseModal>

@code {
	private string ActiveTab { get; set; } = "Timer";

	[Parameter] public bool IsOpen { get; set; }
	[Parameter] public EventCallback<bool> IsOpenChanged { get; set; }
	[Parameter] public EventCallback OnClose { get; set; }
	[Parameter] public EventCallback<UserSettingsDto> OnSave { get; set; }

	[Parameter] public CountdownTimerDto PomodoroTimer { get; set; } = default!;
	[Parameter] public CountdownTimerDto ShortBreakTimer { get; set; } = default!;
	[Parameter] public CountdownTimerDto LongBreakTimer { get; set; } = default!;
	[Parameter] public UserSettingsDto Settings { get; set; } = default!;

	[Parameter]
	public UserSettingsDto DefaultSettings { get; set; } = new UserSettingsDto
		{
			PomodoroDurationMinutes = TimeSpan.FromMinutes(25),
			ShortBreakDurationMinutes = TimeSpan.FromMinutes(5),
			LongBreakDurationMinutes = TimeSpan.FromMinutes(15),
			RunsBeforeLongBreak = 4,
			IsAutoStart = false,
			IsAutoStartAfterRestart = true,
			AutomaticallyProceedToNextTaskAfterDone = true,
			AutomaticallyMarkDoneTasks = true,
			AutomaticallyClearDoneTasks = false,
			ShortBreakText = "",
			LongBreakText = ""
		};

	private void ResetToDefaults()
	{
		Settings.PomodoroDurationMinutes = DefaultSettings.PomodoroDurationMinutes;
		Settings.ShortBreakDurationMinutes = DefaultSettings.ShortBreakDurationMinutes;
		Settings.LongBreakDurationMinutes = DefaultSettings.LongBreakDurationMinutes;
		Settings.RunsBeforeLongBreak = DefaultSettings.RunsBeforeLongBreak;
		Settings.IsAutoStart = DefaultSettings.IsAutoStart;
		Settings.IsAutoStartAfterRestart = DefaultSettings.IsAutoStartAfterRestart;
		Settings.AutomaticallyProceedToNextTaskAfterDone = DefaultSettings.AutomaticallyProceedToNextTaskAfterDone;
		Settings.AutomaticallyMarkDoneTasks = DefaultSettings.AutomaticallyMarkDoneTasks;
		Settings.AutomaticallyClearDoneTasks = DefaultSettings.AutomaticallyClearDoneTasks;

		StateHasChanged();
	}

	private async Task SaveAndClose()
	{
		PomodoroTimer.Duration = Settings.PomodoroDurationMinutes;
		ShortBreakTimer.Duration = Settings.ShortBreakDurationMinutes;
		LongBreakTimer.Duration = Settings.LongBreakDurationMinutes;

		await OnSave.InvokeAsync(Settings);
		await OnClose.InvokeAsync();
	}

	private int PomodoroMinutes
	{
		get => (int)Settings.PomodoroDurationMinutes.TotalMinutes;
		set => Settings.PomodoroDurationMinutes = TimeSpan.FromMinutes(Math.Clamp(value, 1, 999));
	}

	private int ShortBreakMinutes
	{
		get => (int)Settings.ShortBreakDurationMinutes.TotalMinutes;
		set => Settings.ShortBreakDurationMinutes = TimeSpan.FromMinutes(Math.Clamp(value, 1, 999));
	}

	private int LongBreakMinutes
	{
		get => (int)Settings.LongBreakDurationMinutes.TotalMinutes;
		set => Settings.LongBreakDurationMinutes = TimeSpan.FromMinutes(Math.Clamp(value, 1, 999));
	}

	public int RunsBeforeLongBreak
	{
		get => Settings.RunsBeforeLongBreak;
		set => Settings.RunsBeforeLongBreak = Math.Clamp(value, 1, 999);
	}

	protected override async Task OnInitializedAsync()
	{
		var permission = await JS.InvokeAsync<string>("getNotificationPermission");
		Settings.EnableNotifications = permission == "granted";
	}

	private async Task RequestNotificationPermission()
	{
		var permission = await JS.InvokeAsync<string>("requestNotificationPermission");
		Settings.EnableNotifications = permission == "granted";
		StateHasChanged();
	}


}

<style>
	.modal-overlay {
		position: fixed;
		top: 0;
		left: 0;
		width: 100vw;
		height: 100vh;
		background-color: rgba(0, 0, 0, 0.6);
		display: flex;
		justify-content: center;
		align-items: center;
		z-index: 1000;
		padding: 20px;
	}

	.modal-content {
		background-color: #121212;
		color: white;
		padding: 1.5rem;
		border-radius: 12px;
		width: 500px;
		max-width: 95vw;
		font-family: sans-serif;
		box-shadow: 0 8px 30px rgba(0, 0, 0, 0.6);
		position: relative;
	}

	.modal-header {
		border-bottom: 0;
	}

	.settings-container {
		display: flex;
		flex-direction: column;
		gap: 1.2rem;
	}

	.settings-tabs {
		display: flex;
		overflow: hidden;
		border-radius: 0;
	}

		.settings-tabs button {
			flex: 1;
			padding: 0.7rem 0;
			background: #1e1e1e;
			color: #bbb;
			border: none;
			cursor: pointer;
			font-size: 1rem;
			transition: background 0.2s;
		}

			.settings-tabs button.active {
				background: #4cd137;
				color: black;
				font-weight: 600;
			}

	.settings-content {
		min-height: 400px;
		height: 600px;
		display: flex;
		flex-direction: column;
		justify-content: flex-start;
	}

	.settings-section {
		display: flex;
		flex-direction: column;
		gap: 1rem;
	}

	.timer-inputs {
		display: flex;
		gap: 0.8rem;
	}

		.timer-inputs div {
			flex: 1;
			display: flex;
			flex-direction: column;
		}

	label {
		font-size: 0.9rem;
		color: #ccc;
		margin-bottom: 0.4rem;
		font-weight: 500;
	}

	input[type="number"],
	textarea.reminder-input {
		width: 100%;
		min-height: 40px;
		max-height: 200px;
		padding: 0.6rem;
		font-size: 1rem;
		border-radius: 6px;
		border: 1px solid #444;
		background-color: #1e1e1e;
		color: white;
		box-sizing: border-box;
		overflow-y: hidden;
		resize: vertical;
	}

	.switch-row {
		display: flex;
		justify-content: space-between;
		align-items: center;
		font-size: 0.95rem;
	}

	.switch {
		position: relative;
		display: inline-block;
		width: 50px;
		height: 26px;
	}

		.switch input {
			opacity: 0;
			width: 0;
			height: 0;
		}

	.slider {
		position: absolute;
		cursor: pointer;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background-color: #333;
		transition: .3s;
		border-radius: 13px;
	}

		.slider:before {
			position: absolute;
			content: "";
			height: 20px;
			width: 20px;
			left: 3px;
			bottom: 3px;
			background-color: white;
			transition: .3s;
			border-radius: 50%;
		}

	.switch input:checked + .slider {
		background-color: #4cd137;
	}

		.switch input:checked + .slider:before {
			transform: translateX(24px);
		}

	.notify-btn {
		background-color: #333;
		border: none;
		color: white;
		padding: 6px 14px;
		font-size: 0.95rem;
		border-radius: 13px;
		cursor: pointer;
		user-select: none;
		transition: background-color 0.3s;
		min-width: 50px;
		height: 25px;
	}

		.notify-btn:hover {
			background-color: #4cd137;
			color: black;
		}

		.notify-btn.enabled {
			background-color: #4cd137;
			color: black;
		}

			.notify-btn.enabled:hover {
				background-color: #4cd137;
				color: black;
			}

	.info-icon {
		margin-left: 5px;
		position: relative;
		display: inline-flex;
		align-items: center;
		justify-content: center;
		cursor: pointer;
		color: #ccc;
		filter: brightness(0.25);
	}

		.info-icon:hover::after {
			content: attr(data-title);
			position: absolute;
			background: #333;
			color: white;
			padding: 8px 12px;
			border-radius: 4px;
			font-size: 0.8rem;
			bottom: 100%;
			left: 0;
			z-index: 100;
			width: 300px;
			word-wrap: break-word;
			text-align: left;
			line-height: 1.4;
			margin-bottom: 10px;
		}

	.reset-btn {
		flex: 1; /* keeps equal size with the others */
		background-color: #e74c3c;
		color: white;
		border: none;
		padding: 0.7rem 0;
		font-size: 1rem;
		border-radius: 0; /* match tab style */
		cursor: pointer;
		transition: background-color 0.3s, transform 0.2s;
	}

		.reset-btn:hover {
			background-color: #c0392b;
			transform: translateY(-1px);
		}

	.shortcuts-section {
		gap: 1.5rem;
	}

	.shortcut-group h3 {
		color: white;
		font-size: 1.1rem;
		margin: 0 0 0.8rem 0;
		border-bottom: 1px solid #333;
		padding-bottom: 0.4rem;
	}

	.shortcut-item {
		display: flex;
		justify-content: space-between;
		align-items: center;
		padding: 0.5rem 0;
	}

	.shortcut-key {
		background: rgb(192, 57, 43);
		color: #4cd137;
		padding: 0.3rem 0.6rem;
		border-radius: 4px;
		font-family: monospace;
		font-size: 0.9rem;
		font-weight: 600;
		min-width: 80px;
		text-align: center;
	}

	.shortcut-desc {
		color: white;
		font-size: 0.95rem;
		text-align: right;
		flex: 1;
		margin-left: 1rem;
	}

</style>