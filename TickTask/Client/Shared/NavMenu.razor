@using TickTask.Client.Enums
@using TickTask.Client.Services
@inject TimerStateService TimerState
@inject ILogger<TimerStateService> Logger
@implements IDisposable

<div class="top-row ps-3 navbar navbar-dark" style="background-color:@GetNavBackgroundColor()">
    <div class="container-fluid">
        <a class="navbar-brand" href="">TickTask</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        ...
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    protected override void OnInitialized()
    {
        Logger.LogWarning("NavMenu OnInitialized - subscribing to timer changes");
        TimerState.OnChange += TimerChanged;
        Logger.LogWarning($"NavMenu current timer type: {TimerState.CurrentTimerType}");
    }

    private async Task TimerChanged()
    {
        Logger.LogWarning("NavMenu received timer change!");
        await InvokeAsync(StateHasChanged);
    }

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu() => collapseNavMenu = !collapseNavMenu;

    private string GetNavBackgroundColor() => TimerState.CurrentTimerType switch
    {
        TimerType.Pomodoro => "rgba(227, 18, 10, 1)",
        TimerType.ShortBreak => "rgba(9, 180, 237, 1)",
        TimerType.LongBreak => "rgba(0, 191, 0, 0.8)",
        _ => "rgba(227, 18, 10, 1)"
    };

    public void Dispose()
    {
        TimerState.OnChange -= TimerChanged;
    }
}
