@page "/"
@using TickTask.Client.Enums
@using TickTask.Client.Services
@using TickTask.Client.Modals
@using TickTask.Shared;
@using TickTask.Shared.Data
@inject TimerService timerService
@inject TaskApiService taskService
@inject IJSRuntime JS
@inject ILogger<Index> Logger
@inject HttpClient _http
@inject UserSettingsApiService userSettingsApiService
@inject UserProjectApiService userProjectApiService
@inject TimerStateService TimerState
@implements IDisposable

<PageTitle>
	@(_timerType == TimerType.Pomodoro
			? $"🍅 {GetCountdownTimer.RemainingTime}"
			: $"🌴 {GetCountdownTimer.RemainingTime}")
</PageTitle>

<LoginModal @bind-IsOpen="_showLogin" />

<div style="background-color:@GetBackgroundColor(); min-height: 100vh; margin: 0">
	<div class="timer-container">
		<div class="timer-header" style="background-color:@GetBackgroundColor();">
			<!-- Timer Tabs -->
			<div class="timer-tabs">
				@foreach (TimerType type in Enum.GetValues<TimerType>())
				{
					<button class="timer-tab @(_timerType == type ? "active" : "")"
					@onclick="() => SelectAndResetTimer(type, userSwitchedTimersUsingTabs : true)">
						@type
						@if (type == TimerType.Pomodoro)
						{
							<span class="pomodoro-count">@_numberOfPomodorosRun/@_userSettings.RunsBeforeLongBreak</span>
						}
					</button>
				}
				<button class="control-btn settings-btn" @onclick="OpenSettings">
					<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-sliders-horizontal-icon lucide-sliders-horizontal"><path d="M10 5H3" /><path d="M12 19H3" /><path d="M14 3v4" /><path d="M16 17v4" /><path d="M21 12h-9" /><path d="M21 19h-5" /><path d="M21 5h-7" /><path d="M8 10v4" /><path d="M8 12H3" /></svg>
				</button>
			</div>

			<!-- Timer Display -->
			<div class="timer-display">
				<h1 class="timer-time">@($"{(int)GetCountdownTimer.RemainingTime.TotalMinutes:00}:{GetCountdownTimer.RemainingTime.Seconds:00}")</h1>
				@if (GetCountdownTimer.RemainingTime.TotalMinutes + 1 <= GetCountdownTimer.Duration.TotalMinutes)
				{
					<button class="plus-one-btn"
					@onclick="() => AddTimeToTimer()">
						+1
					</button>
				}
			</div>

			<!-- Timer Control Buttons -->
			<div class="timer-controls">
				<button class="secondary-btn" @onclick="() => RestartTimer(GetCountdownTimer)">⟲</button>

				<button class="btn-primary timer-main-btn @(GetCountdownTimer.IsRunning ? "running" : "")"
					@onclick="() => ToggleStartStopTimer(_timerType, GetCountdownTimer)">
						@(GetCountdownTimer.IsRunning ? "PAUSE" : "START")
				</button>

				<button class="secondary-btn"
				@onclick="() => HandleTimerFinish(timerWasSkipped : true)">
					<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-arrow-big-right-icon lucide-arrow-big-right"><path d="M11 9a1 1 0 0 0 1-1V5.061a1 1 0 0 1 1.811-.75l6.836 6.836a1.207 1.207 0 0 1 0 1.707l-6.836 6.835a1 1 0 0 1-1.811-.75V16a1 1 0 0 0-1-1H5a1 1 0 0 1-1-1v-4a1 1 0 0 1 1-1z" /></svg>
				</button>
			</div>

		</div>
		<!-- Task List Component -->
		<Tasks @ref="_tasks"
		Settings="_userSettings"
		OnResetPomodoros="ResetPomodoroCount"
		ActivePomodoro="_pomodoroTimer"
		ActiveShortBreakTimer="_shortBreakTimer"
		ActiveLongBreakTimer="_longBreakTimer"
		CurrentTimer="GetCountdownTimer"
		OnSave="CreateOrUpdateSettingsOnSave" />

		<!-- Modals -->
		<SettingsModal @bind-IsOpen="_showSettings"
		DefaultSettings="@_defaultSettings"
		Settings="@_userSettings"
		PomodoroTimer="@_pomodoroTimer"
		ShortBreakTimer="@_shortBreakTimer"
		LongBreakTimer="@_longBreakTimer"
		OnClose="SyncSettingsToDisplay"
		OnSave="CreateOrUpdateSettingsOnSave" />

		@if (_showFinishModal && GetCountdownTimer is not PomodoroTimerDto)
		{
			<TimerFinishModal @bind-IsOpen="_showFinishModal"
			OnClose="@(() => _showFinishModal = false)" />
		}
	</div>
</div>

@code
{
	private ProjectDto _defaultProject = new(); // to be expanded with multiple projects for each user - each with own tasks, timers and settings
	private PomodoroTimerDto _pomodoroTimer = new PomodoroTimerDto();
	private ShortBreakTimerDto _shortBreakTimer = new ShortBreakTimerDto();
	private LongBreakTimerDto _longBreakTimer = new LongBreakTimerDto();
	private Tasks? _tasks;
	private int _numberOfPomodorosRun = 0;

	private UserSettingsDto _defaultSettings = new();
	private UserSettingsDto _userSettings = new();
	private bool _settingsExist = false;
	private bool _showSettings = false;
	private bool _showLogin = false;
	private bool _showFinishModal = false;
	private void OpenSettings() => _showSettings = true;
	private DotNetObjectReference<Pomodoro>? _objRef;

	private TimerType _timerType = Enums.TimerType.Pomodoro;

	private CountdownTimerDto GetCountdownTimer => _timerType switch
	{
		TimerType.Pomodoro => _pomodoroTimer,
		TimerType.ShortBreak => _shortBreakTimer,
		TimerType.LongBreak => _longBreakTimer,
		_ => _pomodoroTimer
	};

	private string GetBackgroundColor() => _timerType switch
	{
		TimerType.Pomodoro => "rgba(227, 18, 10, 1)",     // Red
		TimerType.ShortBreak => "rgba(9, 180, 237, 1)",   // Blue
		TimerType.LongBreak => "rgba(0, 191, 0, 1)",      // Green
		_ => "rgba(227, 18, 10, 1)"
	};

	protected override async Task OnInitializedAsync()
	{
		timerService.OnTimerUpdate += HandleTimerUpdate;
		timerService.OnTimerFinish += (bool skipped) => HandleTimerFinish(skipped);

		_userSettings = await userSettingsApiService.GetAsync();
		_settingsExist = _userSettings != null && _userSettings.UserSettingsId > 0;
		_defaultProject = await userProjectApiService.GetDefaultProjectAsync();

		await SyncSettingsToDisplay();

		if (_userSettings?.IsAutoStart == true)
			ToggleStartStopTimer(_timerType, GetCountdownTimer);

		StateHasChanged();
	}
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			_objRef = DotNetObjectReference.Create(this);
			await JS.InvokeVoidAsync("registerGlobalKeyHandler", _objRef);
		}
	}

	[JSInvokable]
	public async Task OnSpacePressed()
	{
		ToggleStartStopTimer(_timerType, GetCountdownTimer);
		StateHasChanged();
	}

	[JSInvokable]
	public async Task OnTabPressed()
	{
		if (_timerType == TimerType.Pomodoro)
			await _tasks.AddTask();

		StateHasChanged();
	}

	private async Task SyncSettingsToDisplay()
	{
		var settingsToUse = _settingsExist ? _userSettings : _defaultSettings;

		if (!GetCountdownTimer.IsRunning)
		{
			_pomodoroTimer.Duration = settingsToUse.PomodoroDurationMinutes;
			_shortBreakTimer.Duration = settingsToUse.ShortBreakDurationMinutes;
			_longBreakTimer.Duration = settingsToUse.LongBreakDurationMinutes;

			_pomodoroTimer.RemainingTime = _pomodoroTimer.Duration;
			_shortBreakTimer.RemainingTime = _shortBreakTimer.Duration;
			_longBreakTimer.RemainingTime = _longBreakTimer.Duration;
		}

		StateHasChanged();
	}

	private async Task CreateOrUpdateSettingsOnSave(UserSettingsDto updatedSettings)
	{
		if (_settingsExist)
		{
			await userSettingsApiService.UpdateAsync(updatedSettings);
		}
		else
		{
			var created = await userSettingsApiService.CreateAsync(updatedSettings);
			if (created != null)
			{
				_userSettings = created;
				_settingsExist = true;
			}
		}
	}

	private async Task GetUserSettings()
	{
		_userSettings = await userSettingsApiService.GetAsync();
		StateHasChanged();
	}

	private void TogglePomodoro() =>
	ToggleStartStopTimer(TimerType.Pomodoro, _pomodoroTimer);

	private void ToggleShortBreak() =>
	ToggleStartStopTimer(TimerType.ShortBreak, _shortBreakTimer);

	private void ToggleLongBreak() =>
	ToggleStartStopTimer(TimerType.LongBreak, _longBreakTimer);

	private async void ToggleStartStopTimer(TimerType type, CountdownTimerDto timer)
	{
		if (timer.IsRunning)
		{
			timerService.Stop(timer);
			// timerFinish = true;
		}
		else
		{
			if (type == TimerType.Pomodoro)
			{
				await _tasks.SetNextAvailableTaskIfNoneActive();
			}

			timerService.Start(type, timer);
		}

		await JS.InvokeVoidAsync("playClickSound");
	}

	private void SelectAndResetTimer(TimerType timerType, bool userSwitchedTimersUsingTabs = false)
	{
		TimerState.SetTimerType(timerType);

		if (userSwitchedTimersUsingTabs)
			_showFinishModal = false;

		this._timerType = timerType;
		timerService.Reset(GetCountdownTimer);

		if (_userSettings.IsAutoStart)
			ToggleStartStopTimer(this._timerType, GetCountdownTimer);
	}

	private async void HandleTimerUpdate() => await InvokeAsync(StateHasChanged);

	private async void HandleTimerFinish(bool timerWasSkipped = false)
	{
		TimerState.SetTimerType(_timerType);

		if (timerWasSkipped)
			_showFinishModal = false;
		else
			_showFinishModal = true;

		switch (_timerType)
		{
			case TimerType.Pomodoro:
				_numberOfPomodorosRun++;
				await IncrementActiveTaskPomodoroCount();

				if (!_tasks.HasMoreTasks() && _tasks.ShouldPlaySoundAfterAllTasksDone)
				{
					await JS.InvokeVoidAsync("playTasksDoneSound");
					_tasks.ShouldPlaySoundAfterAllTasksDone = false;
				}
				else if (!timerWasSkipped)
				{
					await JS.InvokeVoidAsync("playAlarmSound");
					await JS.InvokeVoidAsync("showNotification",
						"Pomodoro Finished!",
						_numberOfPomodorosRun >= _userSettings.RunsBeforeLongBreak
							? $"Time for a long break ({(int)_longBreakTimer.Duration.TotalMinutes} min)"
							: $"Take a short break ({(int)_shortBreakTimer.Duration.TotalMinutes} min)");
				}

				if (_numberOfPomodorosRun >= _userSettings.RunsBeforeLongBreak)
				{
					SelectAndResetTimer(TimerType.LongBreak);
					_numberOfPomodorosRun = 0;
				}
				else
				{
					SelectAndResetTimer(TimerType.ShortBreak);
				}
				break;

			case TimerType.ShortBreak:
				if (!timerWasSkipped)
				{
					await JS.InvokeVoidAsync("playBreakOverSound");
					await JS.InvokeVoidAsync("showNotification",
						"Short Break Over!",
						$"Current task is{": " + _tasks.ActiveTask?.Name ?? " not set"}");
				}
				SelectAndResetTimer(TimerType.Pomodoro);
				break;

			case TimerType.LongBreak:
				if (!timerWasSkipped)
				{
					await JS.InvokeVoidAsync("playBreakOverSound");
					await JS.InvokeVoidAsync("showNotification",
						"Long Break Over!",
						$"Current task is{": " + _tasks.ActiveTask?.Name ?? " not set"}");
				}

				SelectAndResetTimer(TimerType.Pomodoro);
				break;
		}
	}

	private void RestartTimer(CountdownTimerDto timer)
	{
		timerService.Reset(timer);

		if (_userSettings.IsAutoStartAfterRestart) ToggleStartStopTimer(_timerType, GetCountdownTimer);
	}

	private async Task IncrementActiveTaskPomodoroCount()
	{
		if (_tasks != null)
			await _tasks.IncrementActivePomodoroCount();
	}

	private void ResetPomodoroCount() => _numberOfPomodorosRun = 0;

	private void AddTimeToTimer()
	{
		bool DoesAddedTimeExceedMaxDuration = GetCountdownTimer.RemainingTime + TimeSpan.FromMinutes(1) > GetCountdownTimer.Duration;

		if (!DoesAddedTimeExceedMaxDuration) GetCountdownTimer.RemainingTime = GetCountdownTimer.RemainingTime.Add(TimeSpan.FromMinutes(1));
	}

	public void Dispose()
	{
		timerService.OnTimerUpdate -= HandleTimerUpdate;
		timerService.OnTimerFinish -= HandleTimerFinish;
		_objRef?.Dispose();
	}
}
