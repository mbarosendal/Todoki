@page "/"
@using TickTask.Client.Enums
@using TickTask.Client.Services
@using TickTask.Client.Components
@using TickTask.Shared
@inject TimerService timerService
@inject TaskService taskService
@inject IJSRuntime JS
@inject ILogger<Index> Logger
@implements IDisposable

<PageTitle>
	@(timerType == TimerType.Pomodoro
		? $"🍅 {GetCountdownTimer.RemainingTime}"
		: $"🌴 {GetCountdownTimer.RemainingTime}")
</PageTitle>

<div style="background-color:@GetBackgroundColor(); min-height: 100vh; margin: 0">
	<div class="timer-container">
		<button class="control-btn" @onclick="OpenSettings">⚙️Settings</button>

		<!-- Timer Tabs -->
		<div class="timer-tabs">
			@foreach (TimerType type in Enum.GetValues<TimerType>())
			{
				<button class="timer-tab @(timerType == type ? "active" : "")"
						@onclick="() => SelectAndResetTimer(type)">
					@type
					@if (type == TimerType.Pomodoro)
					{
						<span class="pomodoro-count">@settings.NumberOfPomodorosRun/@settings.RunsBeforeLongBreak</span>
					}
				</button>
			}
		</div>

		<!-- Timer Display -->
		<div class="timer-display">
			<h1 class="timer-time">@($"{(int)GetCountdownTimer.RemainingTime.TotalMinutes:00}:{GetCountdownTimer.RemainingTime.Seconds:00}")</h1>
			@if (GetCountdownTimer.RemainingTime.TotalMinutes + 1 <= GetCountdownTimer.Duration.TotalMinutes)
			{
				<button class="plus-one-btn"
						title="Add one minute to the current timer (not above max duration set in settings)"
						@onclick="() => AddTimeToTimer()">
					+1
				</button>
			}
		</div>

		<!-- Timer Control Buttons -->
		<div class="timer-controls">
			<button class="restart-btn" @onclick="() => RestartTimer(GetCountdownTimer)">⟲</button>
			<button class="btn-primary timer-main-btn @(GetCountdownTimer.IsRunning ? "running" : "")"
					@onclick="() => ToggleStartStopTimer(timerType, GetCountdownTimer)">
				@(GetCountdownTimer.IsRunning ? "PAUSE" : "START")
			</button>
			<button class="btn-secondary timer-control-btn"
					@onclick="() => HandleTimerFinish(timerWasSkipped : true)">
				→
			</button>
		</div>

		<!-- Task List Component -->
		<TaskList @ref="taskListRef"
				  TimerSettings="settings"
				  OnResetPomodoros="ResetPomodoroCount"
				  ActivePomodoro="pomodoroTimer"
				  ActiveShortBreakTimer="shortBreakTimer"
				  ActiveLongBreakTimer="longBreakTimer"
				  CurrentTimer="GetCountdownTimer" />

		<!-- Modals -->
		<SettingsModal @bind-IsOpen="showSettings"
					   Settings="@settings"
					   PomodoroTimer="@pomodoroTimer"
					   ShortBreakTimer="@shortBreakTimer"
					   LongBreakTimer="@longBreakTimer"
					   OnClose="HandleSettingsClosed" />

		@if (GetCountdownTimer is not PomodoroTimer)
		{
			<TimerFinishModal @bind-IsOpen="isTimerFinished" CountdownTimer="@GetCountdownTimer" />
		}

	</div>
</div>

<style>
	.timer-container {
		max-width: 600px;
		margin: 0 auto;
		padding: 20px;
		min-height: 100vh;
		color: white;
		font-family: Arial, sans-serif;
	}

	.timer-tabs {
		display: flex;
		justify-content: center;
		gap: 1px;
		margin-bottom: 40px;
		background: rgba(0,0,0,0.2);
		border-radius: 8px;
		overflow: hidden;
	}

	.timer-tab {
		flex: 1;
		padding: 12px 20px;
		background: rgba(255,255,255,0.1);
		border: none;
		color: rgba(255,255,255,0.7);
		cursor: pointer;
		transition: all 0.3s ease;
		display: flex;
		justify-content: center;
		align-items: center;
		gap: 8px;
	}

		.timer-tab.active {
			background: rgba(255,255,255,0.2);
			color: white;
			font-weight: bold;
		}

		.timer-tab:hover {
			background: rgba(255,255,255,0.15);
		}

	.pomodoro-count {
		font-size: 0.8rem;
		opacity: 0.9;
		background: rgba(0,0,0,0.2);
		padding: 2px 6px;
		border-radius: 4px;
	}

	.timer-display {
		display: flex;
		justify-content: center;
		align-items: center;
		margin-bottom: 20px;
		position: relative;
	}

	.timer-time {
		font-size: 4rem;
		font-weight: 300;
		margin: 0;
		letter-spacing: 0.1em;
	}

	.plus-one-btn {
		background: rgba(0,0,0,0.3);
		border: none;
		color: white;
		padding: 6px 10px;
		border-radius: 4px;
		font-size: 0.8rem;
		cursor: pointer;
		transition: all 0.3s ease;
		position: absolute;
		left: 125px;
		top: 50%;
		transform: translateY(-50%);
	}

		.plus-one-btn:hover {
			background: rgba(0,0,0,0.5);
		}

	.timer-controls {
		display: flex;
		justify-content: center;
		align-items: center;
		gap: 20px;
		margin-bottom: 20px;
	}

	/* Primary button styles */
	.timer-main-btn, .btn-primary {
		background: rgba(10, 137, 18, 1) !important;
		border: none;
		color: white;
		padding: 12px 24px;
		border-radius: 8px;
		cursor: pointer;
		transition: background 0.2s ease;
	}

		.timer-main-btn:hover, .btn-primary:hover {
			background: #1e7a1e !important;
		}

		.timer-main-btn:active, .btn-primary:active {
			background: #1a6b1a !important;
			transform: translateY(1px);
		}

		.timer-main-btn.running, .btn-primary.running {
			background: #1e7a1e !important;
		}

	/* Secondary button styles (skip and restart) */
	.timer-control-btn, .btn-secondary, .restart-btn {
		background: none;
		border: none;
		color: white;
		cursor: pointer;
		opacity: 0.7;
		transition: all 0.3s ease;
	}

	.timer-control-btn, .btn-secondary {
		font-size: 2rem;
	}

	.restart-btn {
		font-size: 1.8rem;
	}

		.timer-control-btn:hover, .btn-secondary:hover, .restart-btn:hover {
			opacity: 1;
			transform: scale(1.1);
		}

	/* Control buttons (settings, etc.) */
	.control-btn {
		background: rgba(255,255,255,0.1);
		border: none;
		color: white;
		padding: 8px 16px;
		border-radius: 6px;
		font-size: 0.9rem;
		cursor: pointer;
		transition: all 0.3s ease;
		position: relative;
	}

		.control-btn:hover {
			background: rgba(255,255,255,0.2);
		}

		/* Tooltip styles for buttons with title attribute */
		.plus-one-btn[title]:hover::after,
		.control-btn[title]:hover::after {
			content: attr(title);
			position: absolute;
			bottom: 100%;
			left: 50%;
			transform: translateX(-50%);
			background: rgba(0,0,0,0.9);
			color: white;
			padding: 8px 12px;
			border-radius: 4px;
			font-size: 0.8rem;
			white-space: nowrap;
			z-index: 1000;
			margin-bottom: 5px;
			opacity: 1;
			transition: opacity 0.3s ease;
		}

	.timer-info {
		display: flex;
		justify-content: flex-start;
		align-items: center;
		margin-top: 15px;
		font-size: 1.1rem;
		opacity: 0.8;
	}
</style>

@code
{
	private PomodoroTimer pomodoroTimer = new PomodoroTimer();
	private ShortBreakTimer shortBreakTimer = new ShortBreakTimer();
	private LongBreakTimer longBreakTimer = new LongBreakTimer();

	private TaskList? taskListRef;

	private TimerType timerType = Enums.TimerType.Pomodoro;
	private CountdownTimer GetCountdownTimer => timerType switch
	{
		TimerType.Pomodoro => pomodoroTimer,
		TimerType.ShortBreak => shortBreakTimer,
		TimerType.LongBreak => longBreakTimer,
		_ => pomodoroTimer
	};

	private string GetBackgroundColor() => timerType switch
	{
		TimerType.Pomodoro => "rgba(227, 18, 10, 1)",     // Red
		TimerType.ShortBreak => "rgba(34, 139, 34, 1)",   // Green --- move to long break, make this a light blue?
		TimerType.LongBreak => "rgba(0, 100, 0, 1)",      // Dark Green
		_ => "rgba(227, 18, 10, 1)"
	};


	private bool isTimerFinished = false;

	private TimerSettings settings = new();
	private bool showSettings = false;
	private void OpenSettings() => showSettings = true;

	private void HandleSettingsClosed()
	{
		pomodoroTimer.RemainingTime = pomodoroTimer.Duration;
		shortBreakTimer.RemainingTime = shortBreakTimer.Duration;
		longBreakTimer.RemainingTime = longBreakTimer.Duration;

		if (!GetCountdownTimer.IsRunning)
		{
			InvokeAsync(StateHasChanged);
		}
	}

	protected override void OnInitialized()
	{
		timerService.OnTimerUpdate += HandleTimerUpdate;
		timerService.OnTimerFinish += (bool skipped) => HandleTimerFinish(skipped);

		if (settings.IsAutoStart) ToggleStartStopTimer(timerType, GetCountdownTimer);

		GetCountdownTimer.RemainingTime = GetCountdownTimer.Duration;
	}

	private async void HandleTimerUpdate() => await InvokeAsync(StateHasChanged);

	private void TogglePomodoro() =>
	ToggleStartStopTimer(TimerType.Pomodoro, pomodoroTimer);

	private void ToggleShortBreak() =>
	ToggleStartStopTimer(TimerType.ShortBreak, shortBreakTimer);

	private void ToggleLongBreak() =>
	ToggleStartStopTimer(TimerType.LongBreak, longBreakTimer);

	private async void ToggleStartStopTimer(TimerType type, CountdownTimer timer)
	{
		if (timer.IsRunning)
		{
			timerService.Stop(timer);
			// timerFinish = true;
		}
		else
		{
			if (type == TimerType.Pomodoro)
			{
				await taskListRef.SetNextAvailableTaskIfNoneActive();
			}

			timerService.Start(type, timer);
		}

		await JS.InvokeVoidAsync("playClickSound");
	}

	private void SelectAndResetTimer(TimerType type)
	{
		timerType = type;
		timerService.Reset(GetCountdownTimer);

		if (settings.IsAutoStart) ToggleStartStopTimer(timerType, GetCountdownTimer);
	}

	private async void HandleTimerFinish(bool timerWasSkipped = false)
	{
		// isTimerFinished = true;

		// hide break modal when skipped?
		if (!timerWasSkipped)
			isTimerFinished = true;

		switch (timerType)
		{
			case TimerType.Pomodoro:
				settings.NumberOfPomodorosRun++;
				await IncrementActiveTaskPomodoroCount();

				if (!taskListRef.HasMoreTasks() && taskListRef.ShouldPlaySoundAfterAllTasksDone)
				{
					await JS.InvokeVoidAsync("playTasksDoneSound");
					taskListRef.ShouldPlaySoundAfterAllTasksDone = false;
				}
				else if (!timerWasSkipped)
				{
					await JS.InvokeVoidAsync("playAlarmSound");
				}

				if (settings.NumberOfPomodorosRun >= settings.RunsBeforeLongBreak)
				{
					SelectAndResetTimer(TimerType.LongBreak);
					settings.NumberOfPomodorosRun = 0;
				}
				else
				{
					SelectAndResetTimer(TimerType.ShortBreak);
				}
				break;
			case TimerType.ShortBreak:
			case TimerType.LongBreak:
				if (!timerWasSkipped)
				{
					await JS.InvokeVoidAsync("playBreakOverSound");
				}

				SelectAndResetTimer(TimerType.Pomodoro);
				break;
		}
	}

	private void RestartTimer(CountdownTimer timer)
	{
		timerService.Reset(timer);

		if (settings.IsAutoStartAfterRestart) ToggleStartStopTimer(timerType, GetCountdownTimer);
	}

	private async Task IncrementActiveTaskPomodoroCount()
	{
		if (taskListRef != null)
			await taskListRef.IncrementActivePomodoroCount();
	}

	private void ResetPomodoroCount() => settings.NumberOfPomodorosRun = 0;

	private void AddTimeToTimer()
	{
		bool DoesAddedTimeExceedMaxDuration = GetCountdownTimer.RemainingTime + TimeSpan.FromMinutes(1) > GetCountdownTimer.Duration;

		if (!DoesAddedTimeExceedMaxDuration) GetCountdownTimer.RemainingTime = GetCountdownTimer.RemainingTime.Add(TimeSpan.FromMinutes(1));
	}

	public void Dispose()
	{
		timerService.OnTimerUpdate -= HandleTimerUpdate;
		timerService.OnTimerFinish -= HandleTimerFinish;
	}
}
