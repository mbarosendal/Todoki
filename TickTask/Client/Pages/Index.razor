@page "/"
@using TickTask.Client.Enums
@using TickTask.Server.Services
@using TickTask.Client.Components
@using TickTask.Shared
@inject TimerService timerService
@inject IJSRuntime JS
@implements IDisposable
@inject ILogger<Index> Logger

<PageTitle>TickTask</PageTitle>

<h1>Welcome to TickTask ✔️</h1>

<div>
	<!-- Timer Tabs -->
	<div>
		@foreach (TimerType type in Enum.GetValues<TimerType>())
		{
			<button @onclick="() => SelectAndResetTimer(type)"
			style="background-color: @(timerType == type ? "darkgreen" : "green")">
				@type
			</button>
		}
	</div>

	<!-- Settings Menu -->
	<button @onclick="OpenSettings">Open Settings</button>
	<SettingsModal @bind-IsOpen="showSettings" Settings="@settings" PomodoroTimer="@pomodoroTimer" ShortBreakTimer="@shortBreakTimer" LongBreakTimer="@longBreakTimer" />

	<!-- TimerFinishModal -->
	<TimerFinishModal @bind-IsOpen="timerFinish" CountdownTimer="@countdownTimer" />

	<!-- Timer Display -->
	<div>
		<h1>@countdownTimer.RemainingTime.ToString(@"mm\:ss")</h1>
		<h3>@($"{settings.NumberOfPomodorosRun} / {settings.RunsBeforeLongBreak}")</h3>
	</div>

	<!-- Timer Control Buttons -->
	<div>
		<button @onclick="() => ToggleStartStopTimer(timerType, countdownTimer)" style="background-color: red">@(countdownTimer.IsRunning ? "Stop" : "Start")</button>
		<button @onclick="() => RestartTimer(countdownTimer)" style="background-color: red">Restart</button>
		<button @onclick="() => ResetPomodoroCount()">Reset </button>
		<button @onclick="() => HandleTimerFinish(timerWasSkipped : true)">Skip</button>
		<button @onclick="() => AddTimeToTimer()">+1</button>
	</div>

	<!-- Tasks Separator -->
	<h2>Tasks</h2>

	<!-- Tasks List -->
	<div style="color:blue">
		@foreach (var task in tasks)
		{
			<div>
				<span>@task.Name</span>
				<button>...</button>
			</div>
		}
	</div>

	<!-- Add Task -->
	<div>
		<button style="background-color: blue">Add Task</button>
	</div>
</div>

@code
{
	// public List<Project> Projects => projects;
	// public List<TaskItem> Tasks => tasks;
	private List<Project> projects = new List<Project>();
	private List<TaskItem> tasks = new List<TaskItem>();

	private CountdownTimer pomodoroTimer = new PomodoroTimer();
	private CountdownTimer shortBreakTimer = new ShortBreakTimer();
	private CountdownTimer longBreakTimer = new LongBreakTimer();

	private TimerType timerType = Enums.TimerType.Pomodoro;
	private CountdownTimer countdownTimer => timerType switch
	{
		TimerType.Pomodoro => pomodoroTimer,
		TimerType.ShortBreak => shortBreakTimer,
		TimerType.LongBreak => longBreakTimer,
		_ => pomodoroTimer
	};

	private bool timerFinish = false;

	private TimerSettings settings = new();
	private bool showSettings = false;
	private void OpenSettings() => showSettings = true;

	protected override void OnInitialized()
	{
		timerService.OnTimerUpdate += HandleTimerUpdate;
		timerService.OnTimerFinish += (bool skipped) => HandleTimerFinish(skipped);

		if (settings.IsAutoStart) ToggleStartStopTimer(timerType, countdownTimer);

		countdownTimer.RemainingTime = countdownTimer.Duration;

		// Initialize dummy data for projects and tasks
		projects.Add(new Project { ProjectId = 1, Title = "Project 1" });

		tasks.Add(new TaskItem { TaskItemId = 1, Name = "Troubleshoot a WLAN connection as a programmer grunt", ProjectId = 1 });
		tasks.Add(new TaskItem { TaskItemId = 2, Name = "CX50", ProjectId = 1 });
		tasks.Add(new TaskItem { TaskItemId = 3, Name = "Moqing", ProjectId = 1 });
	}


	private async void HandleTimerUpdate() => await InvokeAsync(StateHasChanged);

	private void TogglePomodoro() =>
		ToggleStartStopTimer(TimerType.Pomodoro, pomodoroTimer);

	private void ToggleShortBreak() =>
		ToggleStartStopTimer(TimerType.ShortBreak, shortBreakTimer);

	private void ToggleLongBreak() =>
		ToggleStartStopTimer(TimerType.LongBreak, longBreakTimer);

	private async void ToggleStartStopTimer(TimerType type, CountdownTimer timer)
	{
		if (timer.IsRunning)
		{
			timerService.Stop(timer);
			// timerFinish = true;
		}
		else
		{
			timerService.Start(type, timer);
		}

		await JS.InvokeVoidAsync("playClickSound");
	}

	private void SelectAndResetTimer(TimerType type)
	{
		timerType = type;
		timerService.Reset(countdownTimer);

		if (settings.IsAutoStart) ToggleStartStopTimer(timerType, countdownTimer);
	}

	private async void HandleTimerFinish(bool timerWasSkipped = false)
	{
		timerFinish = true;

		switch (timerType)
		{
			case TimerType.Pomodoro:
				settings.NumberOfPomodorosRun++;

				if (!timerWasSkipped)
					await JS.InvokeVoidAsync("playAlarmSound");

				if (settings.NumberOfPomodorosRun >= settings.RunsBeforeLongBreak)
				{
					SelectAndResetTimer(TimerType.LongBreak);
					settings.NumberOfPomodorosRun = 0;
				}
				else
				{
					SelectAndResetTimer(TimerType.ShortBreak);
				}
				break;

			case TimerType.ShortBreak:
			case TimerType.LongBreak:
				SelectAndResetTimer(TimerType.Pomodoro);
				break;
		}
	}

	private void RestartTimer(CountdownTimer timer)
	{
		timerService.Reset(timer);

		if (settings.IsAutoStartAfterRestart) ToggleStartStopTimer(timerType, countdownTimer);
	}

	private void ResetPomodoroCount() => settings.NumberOfPomodorosRun = 0;

	private void AddTimeToTimer()
	{
		bool isMoreThanDuration = countdownTimer.RemainingTime + TimeSpan.FromMinutes(1) > countdownTimer.Duration;

		if (!isMoreThanDuration) countdownTimer.RemainingTime = countdownTimer.RemainingTime.Add(TimeSpan.FromMinutes(1));
	}

	public void Dispose()
	{
		timerService.OnTimerUpdate -= HandleTimerUpdate;
		timerService.OnTimerFinish -= HandleTimerFinish;
	}

}

