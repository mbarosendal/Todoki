@page "/"
@using TickTask.Client.Enums
@using TickTask.Server.Services
@using TickTask.Client.Components
@using TickTask.Shared
@inject TimerService timerService

<PageTitle>TickTask</PageTitle>

<h1>Welcome to TickTask ✔️ !</h1>

<div>
	<!-- Timer Tabs -->
	<div>
		@foreach (TimerType type in Enum.GetValues<TimerType>())
		{
			<button @onclick="() => SelectTimer(type)"
					style="background-color: @(timerType == type ? "darkgreen" : "green")">
				@type
			</button>
		}
	</div>

<button @onclick="OpenSettings">Open Settings</button>
<SettingsModal @bind-IsOpen="showSettings" Settings="@settings" PomodoroTimer="@pomodoroTimer" ShortBreakTimer="@shortBreakTimer" LongBreakTimer="@longBreakTimer"  />

	<!-- Timer Display -->
	<div>
		<h1>@countdownTimer.RemainingTime.ToString(@"mm\:ss")</h1>
		<h3>@($"{settings.NumberOfPomodorosRun} / {settings.RunsBeforeLongBreak}")</h3>
	</div>

	<!-- Timer Control Button -->
	<div>
		<button @onclick="() => ToggleTimer(timerType, countdownTimer)" style="background-color: red">@(countdownTimer.IsRunning ? "Stop" : "Start")</button>
		<button @onclick="() => ResetTimer(countdownTimer)" style="background-color: red">Reset</button>
	</div>

	<!-- Tasks Separator -->
	<h2>Tasks</h2>

	<!-- Tasks List -->
	<div style="color:blue">
		@foreach (var task in tasks)
		{
			<div>
				<span>@task.Name</span>
				<button>...</button>
			</div>
		}
	</div>

	<!-- Add Task -->
	<div>
		<button style="background-color: blue">Add Task</button>
	</div>
</div>

@code
{
	// public List<Project> Projects => projects;
	// public List<TaskItem> Tasks => tasks;
	private List<Project> projects = new List<Project>();
	private List<TaskItem> tasks = new List<TaskItem>();

	private CountdownTimer pomodoroTimer = new PomodoroTimer();
	private CountdownTimer shortBreakTimer = new ShortBreakTimer();
	private CountdownTimer longBreakTimer = new LongBreakTimer();

	private TimerSettings settings = new();
	private bool showSettings = false;
	private void OpenSettings() => showSettings = true;

	private TimerType timerType = Enums.TimerType.Pomodoro;
	private CountdownTimer countdownTimer => timerType switch
	{
		TimerType.Pomodoro => pomodoroTimer,
		TimerType.ShortBreak => shortBreakTimer,
		TimerType.LongBreak => longBreakTimer,
		_ => pomodoroTimer
	};

	protected override void OnInitialized()
	{
		timerService.OnTimerUpdate += async () =>
		{
			await InvokeAsync(StateHasChanged);
		};

		timerService.OnTimerFinish += HandleTimerFinish;

		if (settings.Autostart)
		{
			ToggleTimer(timerType, countdownTimer);
		}

		// Initialize remaining time from duration
		countdownTimer.RemainingTime = countdownTimer.Duration;

		// Initialize dummy data for projects and tasks
		projects.Add(new Project { ProjectId = 1, Title = "Project 1" });

		tasks.Add(new TaskItem { TaskItemId = 1, Name = "Troubleshoot a WLAN connection as a programmer grunt", ProjectId = 1 });
		tasks.Add(new TaskItem { TaskItemId = 2, Name = "CX50", ProjectId = 1 });
		tasks.Add(new TaskItem { TaskItemId = 3, Name = "Moqing", ProjectId = 1 });
	}

	private void TogglePomodoro() =>
		ToggleTimer(TimerType.Pomodoro, pomodoroTimer);

	private void ToggleShortBreak() =>
		ToggleTimer(TimerType.ShortBreak, shortBreakTimer);

	private void ToggleLongBreak() =>
		ToggleTimer(TimerType.LongBreak, longBreakTimer);

	private void SelectTimer(TimerType type)
	{
		timerType = type;
		ResetTimer(countdownTimer);
	}

	private void ToggleTimer(TimerType type, CountdownTimer timer)
	{
		if (timer.IsRunning)
			timerService.Stop(timer);
		else
			timerService.Start(type, timer);
	}

	private void HandleTimerFinish()
	{
		Console.WriteLine("Pomodoro timer finished!");

		if (timerType is TimerType.Pomodoro)
			settings.NumberOfPomodorosRun++;

		if (timerType is TimerType.ShortBreak or TimerType.LongBreak)
			SelectTimer(TimerType.Pomodoro);
		else if (timerType is TimerType.Pomodoro && settings.NumberOfPomodorosRun < settings.RunsBeforeLongBreak)
			SelectTimer(TimerType.ShortBreak);
		else if (timerType is TimerType.Pomodoro && settings.NumberOfPomodorosRun >= settings.RunsBeforeLongBreak)
		{
			SelectTimer(TimerType.LongBreak);
			settings.NumberOfPomodorosRun = 0;
		}

		if (settings.Autostart)
			ToggleTimer(timerType, countdownTimer);
	}

	private void ResetTimer(CountdownTimer timer)
	{
		timerService.Reset(timer);
	}





}

