@page "/"
@using TickTask.Client.Enums
@using TickTask.Client.Services
@using TickTask.Client.Components
@using TickTask.Shared
@inject TimerService timerService
@inject TaskApiService taskService
@inject IJSRuntime JS
@inject ILogger<Index> Logger
@inject HttpClient _httpClient
@inject UserSettingsApiService userSettingsApiService
@implements IDisposable

<PageTitle>
	@(timerType == TimerType.Pomodoro
		? $"🍅 {GetCountdownTimer.RemainingTime}"
		: $"🌴 {GetCountdownTimer.RemainingTime}")
</PageTitle>

<div style="background-color:@GetBackgroundColor(); min-height: 100vh; margin: 0">
	<div class="timer-container">
		<button class="control-btn" @onclick="OpenSettings">⚙️Settings</button>

		<!-- Timer Tabs -->
		<div class="timer-tabs">
			@foreach (TimerType type in Enum.GetValues<TimerType>())
			{
				<button class="timer-tab @(timerType == type ? "active" : "")"
						@onclick="() => SelectAndResetTimer(type, userSwitchedTimersUsingTabs : true)">
					@type
					@if (type == TimerType.Pomodoro)
					{
						<span class="pomodoro-count">@NumberOfPomodorosRun/@settings.RunsBeforeLongBreak</span>
					}
				</button>
			}
		</div>

		<!-- Timer Display -->
		<div class="timer-display">
			<h1 class="timer-time">@($"{(int)GetCountdownTimer.RemainingTime.TotalMinutes:00}:{GetCountdownTimer.RemainingTime.Seconds:00}")</h1>
			@if (GetCountdownTimer.RemainingTime.TotalMinutes + 1 <= GetCountdownTimer.Duration.TotalMinutes)
			{
				<button class="plus-one-btn"
						title="Add one minute to the current timer (not above max duration set in settings)"
						@onclick="() => AddTimeToTimer()">
					+1
				</button>
			}
		</div>

		<!-- Timer Control Buttons -->
		<div class="timer-controls">
			<button class="restart-btn" @onclick="() => RestartTimer(GetCountdownTimer)" title="Restart the current timer">⟲</button>
			<button class="btn-primary timer-main-btn @(GetCountdownTimer.IsRunning ? "running" : "")"
					@onclick="() => ToggleStartStopTimer(timerType, GetCountdownTimer)">
				@(GetCountdownTimer.IsRunning ? "PAUSE" : "START")
			</button>
			<button class="btn-secondary timer-control-btn"
					@onclick="() => HandleTimerFinish(timerWasSkipped : true)"
					title="Skip the current timer">
				→
			</button>
		</div>

		<!-- Task List Component -->
		<TaskList @ref="taskListRef"
				  Settings="settings"
				  OnResetPomodoros="ResetPomodoroCount"
				  ActivePomodoro="pomodoroTimer"
				  ActiveShortBreakTimer="shortBreakTimer"
				  ActiveLongBreakTimer="longBreakTimer"
				  CurrentTimer="GetCountdownTimer" />

		<!-- Modals -->
		<SettingsModal @bind-IsOpen="showSettings"
					   Settings="@settings"
					   PomodoroTimer="@pomodoroTimer"
					   ShortBreakTimer="@shortBreakTimer"
					   LongBreakTimer="@longBreakTimer"
					   OnClose="SyncUserSettingsToDisplayOnClose" />

		@if (showFinishModal && GetCountdownTimer is not PomodoroTimer)
		{
			<TimerFinishModal @bind-IsOpen="showFinishModal"
							  OnClose="@(() => showFinishModal = false)" />
		}
	</div>
</div>

@code
{
	private PomodoroTimer pomodoroTimer = new PomodoroTimer();
	private ShortBreakTimer shortBreakTimer = new ShortBreakTimer();
	private LongBreakTimer longBreakTimer = new LongBreakTimer();
	private int NumberOfPomodorosRun = 0;

	private TaskList? taskListRef;

	private TimerType timerType = Enums.TimerType.Pomodoro;
	private CountdownTimer GetCountdownTimer => timerType switch
	{
		TimerType.Pomodoro => pomodoroTimer,
		TimerType.ShortBreak => shortBreakTimer,
		TimerType.LongBreak => longBreakTimer,
		_ => pomodoroTimer
	};

	private string GetBackgroundColor() => timerType switch
	{
		TimerType.Pomodoro => "rgba(227, 18, 10, 1)",     // Red
		TimerType.ShortBreak => "rgba(9, 180, 237, 1)",   // Blue
		TimerType.LongBreak => "rgba(0, 191, 0, 0.8)",      // Green
		_ => "rgba(227, 18, 10, 1)"
	};


	private bool showFinishModal = false;

	private UserSettings settings = new();



	private bool showSettings = false;
	private void OpenSettings() => showSettings = true;

	private async void SyncUserSettingsToDisplayOnClose()
	{
		if (!GetCountdownTimer.IsRunning)
		{
			pomodoroTimer.RemainingTime = pomodoroTimer.Duration;
			shortBreakTimer.RemainingTime = shortBreakTimer.Duration;
			longBreakTimer.RemainingTime = longBreakTimer.Duration;

			InvokeAsync(StateHasChanged);
		}
	}

	protected async override void OnInitialized()
	{
		timerService.OnTimerUpdate += HandleTimerUpdate;
		timerService.OnTimerFinish += (bool skipped) => HandleTimerFinish(skipped);

		await GetUserSettings();


		if (settings.IsAutoStart) ToggleStartStopTimer(timerType, GetCountdownTimer);

		GetCountdownTimer.RemainingTime = GetCountdownTimer.Duration;
	}

	private async Task GetUserSettings()
	{
		settings = await userSettingsApiService.GetAsync();
		StateHasChanged();
	}

	private DotNetObjectReference<Index>? objRef;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			objRef = DotNetObjectReference.Create(this);
			await JS.InvokeVoidAsync("registerGlobalKeyHandler", objRef);
		}
	}

	[JSInvokable]
	public async Task OnSpacePressed()
	{
		ToggleStartStopTimer(timerType, GetCountdownTimer);
		StateHasChanged();
	}

	[JSInvokable]
	public async Task OnTabPressed()
	{
		if (timerType == TimerType.Pomodoro)
			await taskListRef.AddTask();

		StateHasChanged();
	}


	private async void HandleTimerUpdate() => await InvokeAsync(StateHasChanged);

	private void TogglePomodoro() =>
	ToggleStartStopTimer(TimerType.Pomodoro, pomodoroTimer);

	private void ToggleShortBreak() =>
	ToggleStartStopTimer(TimerType.ShortBreak, shortBreakTimer);

	private void ToggleLongBreak() =>
	ToggleStartStopTimer(TimerType.LongBreak, longBreakTimer);

	private async void ToggleStartStopTimer(TimerType type, CountdownTimer timer)
	{
		if (timer.IsRunning)
		{
			timerService.Stop(timer);
			// timerFinish = true;
		}
		else
		{
			if (type == TimerType.Pomodoro)
			{
				await taskListRef.SetNextAvailableTaskIfNoneActive();
			}

			timerService.Start(type, timer);
		}

		await JS.InvokeVoidAsync("playClickSound");
	}

	private void SelectAndResetTimer(TimerType timerType, bool userSwitchedTimersUsingTabs = false)
	{
		if (userSwitchedTimersUsingTabs)
			showFinishModal = false;

		this.timerType = timerType;
		timerService.Reset(GetCountdownTimer);

		if (settings.IsAutoStart)
			ToggleStartStopTimer(this.timerType, GetCountdownTimer);
	}

	private async void HandleTimerFinish(bool timerWasSkipped = false)
	{
		if (timerWasSkipped)
			showFinishModal = false;
		else
			showFinishModal = true;

		switch (timerType)
		{
			case TimerType.Pomodoro:
				NumberOfPomodorosRun++;
				await IncrementActiveTaskPomodoroCount();

				if (!taskListRef.HasMoreTasks() && taskListRef.ShouldPlaySoundAfterAllTasksDone)
				{
					await JS.InvokeVoidAsync("playTasksDoneSound");
					taskListRef.ShouldPlaySoundAfterAllTasksDone = false;
				}
				else if (!timerWasSkipped)
				{
					await JS.InvokeVoidAsync("playAlarmSound");
					await JS.InvokeVoidAsync("showNotification",
						"Pomodoro Finished!",
						NumberOfPomodorosRun >= settings.RunsBeforeLongBreak
							? $"Time for a long break ({(int)longBreakTimer.Duration.TotalMinutes} min)"
							: $"Take a short break ({(int)shortBreakTimer.Duration.TotalMinutes} min)");
				}

				if (NumberOfPomodorosRun >= settings.RunsBeforeLongBreak)
				{
					SelectAndResetTimer(TimerType.LongBreak);
					NumberOfPomodorosRun = 0;
				}
				else
				{
					SelectAndResetTimer(TimerType.ShortBreak);
				}
				break;

			case TimerType.ShortBreak:
				if (!timerWasSkipped)
				{
					await JS.InvokeVoidAsync("playBreakOverSound");
					await JS.InvokeVoidAsync("showNotification",
						"Short Break Over!",
						$"Current task is{": " + taskListRef.ActiveTask?.Name ?? " not set"}");
				}
				SelectAndResetTimer(TimerType.Pomodoro);
				break;

			case TimerType.LongBreak:
				if (!timerWasSkipped)
				{
					await JS.InvokeVoidAsync("playBreakOverSound");
					await JS.InvokeVoidAsync("showNotification",
						"Long Break Over!",
						$"Current task is{": " + taskListRef.ActiveTask?.Name ?? " not set"}");
				}

				SelectAndResetTimer(TimerType.Pomodoro);
				break;
		}
	}


	private void RestartTimer(CountdownTimer timer)
	{
		timerService.Reset(timer);

		if (settings.IsAutoStartAfterRestart) ToggleStartStopTimer(timerType, GetCountdownTimer);
	}

	private async Task IncrementActiveTaskPomodoroCount()
	{
		if (taskListRef != null)
			await taskListRef.IncrementActivePomodoroCount();
	}

	private void ResetPomodoroCount() => NumberOfPomodorosRun = 0;

	private void AddTimeToTimer()
	{
		bool DoesAddedTimeExceedMaxDuration = GetCountdownTimer.RemainingTime + TimeSpan.FromMinutes(1) > GetCountdownTimer.Duration;

		if (!DoesAddedTimeExceedMaxDuration) GetCountdownTimer.RemainingTime = GetCountdownTimer.RemainingTime.Add(TimeSpan.FromMinutes(1));
	}

	public void Dispose()
	{
		timerService.OnTimerUpdate -= HandleTimerUpdate;
		timerService.OnTimerFinish -= HandleTimerFinish;
		objRef?.Dispose();
	}
}
