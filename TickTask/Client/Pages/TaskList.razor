@using TickTask.Shared
@inject TaskService TaskService

<div class="tasks-section">
	<div class="tasks-header">
		<h2>Tasks</h2>
		<button class="menu-btn" @onclick="ToggleMenu">⋮</button>
	</div>

	<!-- Popup menu -->
	@if (showMenu)
	{
		<div class="menu-popup">
			<button class="menu-item" @onclick="ClearFinished">Clear finished tasks</button>
			<button class="menu-item" @onclick="ClearAll">Clear all tasks</button>
			<button class="menu-item" @onclick="HideTasks">@(hideTasks ? "Show tasks" : "Hide tasks")</button>
			<button class="menu-item" @onclick="OnResetPomodoros">Reset Pomodoro</button>
		</div>
	}

	<!-- Active task display -->
	@if (activeTask != null && !hideTasks)
	{
		<div class="active-task">
			<div class="active-task-label">Active Task:</div>
			<div class="active-task-name">@activeTask.Name</div>
			<div class="active-task-progress">@activeTask.PomodorosRanOnTask/@activeTask.EstimatedNumberOfPomodoros</div>
		</div>
	}

	<!-- Tasks display -->
	@if (tasks == null)
	{
		<div class="loading">Loading tasks...</div>
	}
	else if (hideTasks)
	{
		<div class="tasks-hidden">Tasks are hidden.</div>
	}
	else
	{
		<div class="tasks-list">
			@foreach (var task in tasks)
			{
				<div class="task-item @(task.IsActiveTask ? "active" : "") @(task.IsDone ? "completed" : "")"
				@onclick="() => SetActiveTask(task.TaskItemId)">

					<input type="checkbox"
					class="task-checkbox"
					@onclick="() => FinishTask(task.TaskItemId)"
					checked="@task.IsDone"
					@onclick:stopPropagation="true">

					@if (editingTaskId == task.TaskItemId)
					{
						<input class="task-edit-input @(task.IsDone ? "completed" : "")"
						@bind="task.Name"
						@bind:event="oninput"
						@onblur="() => FinishEdit(task)"
						@onclick:stopPropagation="true"
						placeholder="Edit task..." />
					}
					else
					{
						<span class="task-name @(task.IsDone ? "completed" : "")">@task.Name</span>
					}

					<div class="task-info">
						<span class="task-progress">@task.PomodorosRanOnTask/@task.EstimatedNumberOfPomodoros</span>
					</div>

					<div class="task-actions">
						<button class="task-btn" @onclick="() => StartEdit(task.TaskItemId)" @onclick:stopPropagation="true">✎</button>
						<button class="task-btn" @onclick="() => Delete(task.TaskItemId)" @onclick:stopPropagation="true">❌</button>
						<button class="task-btn" @onclick:stopPropagation="true">⋯</button>
					</div>
				</div>
			}
		</div>

		<div class="add-task-section">
			<button class="add-task-btn" @onclick="AddTask">Add Task</button>
		</div>
	}
</div>

<style>
	.tasks-section {
	background: rgba(0,0,0,0.2);
	border-radius: 12px;
	padding: 20px;
	margin-top: 20px;
	}

	.tasks-header {
	display: flex;
	justify-content: space-between;
	align-items: center;
	margin-bottom: 20px;
	border-bottom: 1px solid rgba(255,255,255,0.1);
	padding-bottom: 10px;
	}

	.tasks-header h2 {
	margin: 0;
	font-size: 1.3rem;
	font-weight: 500;
	}

	.menu-btn {
	background: rgba(255,255,255,0.1);
	border: none;
	color: white;
	padding: 8px 12px;
	border-radius: 6px;
	cursor: pointer;
	font-size: 1.2rem;
	transition: all 0.3s ease;
	}

	.menu-btn:hover {
	background: rgba(255,255,255,0.2);
	}

	.menu-popup {
	position: absolute;
	right: 20px;
	background: rgba(0,0,0,0.8);
	border-radius: 8px;
	padding: 8px 0;
	margin-top: 5px;
	min-width: 180px;
	z-index: 1000;
	box-shadow: 0 4px 12px rgba(0,0,0,0.3);
	}

	.menu-item {
	width: 100%;
	background: none;
	border: none;
	color: white;
	padding: 10px 16px;
	text-align: left;
	cursor: pointer;
	transition: background 0.2s ease;
	}

	.menu-item:hover {
	background: rgba(255,255,255,0.1);
	}

	.active-task {
	background: rgba(34, 139, 34, 0.3);
	border: 1px solid rgba(34, 139, 34, 0.6);
	border-radius: 8px;
	padding: 15px;
	margin-bottom: 20px;
	min-height: 70px;
	}

	.active-task-label {
	font-size: 0.9rem;
	opacity: 0.8;
	margin-bottom: 5px;
	}

	.active-task-name {
	font-size: 1.1rem;
	font-weight: 500;
	margin-bottom: 8px;
	}

	.active-task-progress {
	font-size: 0.9rem;
	opacity: 0.7;
	}

	.loading, .tasks-hidden {
	text-align: center;
	padding: 20px;
	opacity: 0.7;
	font-style: italic;
	}

	.tasks-list {
	space-y: 8px;
	}

	.task-item {
	display: flex;
	align-items: center;
	background: rgba(0,0,0,0.2);
	padding: 12px 16px;
	border-radius: 8px;
	margin-bottom: 8px;
	cursor: pointer;
	transition: all 0.2s ease;
	gap: 12px;
	min-height: 50px;
	}

	.task-item:hover {
	background: rgba(0,0,0,0.3);
	}

	.task-item.active {
	background: rgba(34, 139, 34, 0.25);
	border-left: 4px solid #228B22;
	}

	.task-item.completed {
	opacity: 0.6;
	}

	.task-checkbox {
	flex-shrink: 0;
	width: 18px;
	height: 18px;
	cursor: pointer;
	}

	.task-name {
	flex: 1;
	color: white;
	font-size: 1rem;
	}

	.task-name.completed {
	text-decoration: line-through;
	opacity: 0.7;
	}

	.task-edit-input {
	flex: 1;
	background: rgba(255,255,255,0.1);
	border: 1px solid rgba(255,255,255,0.2);
	border-radius: 4px;
	padding: 6px 8px;
	color: white;
	font-size: 1rem;
	}

	.task-edit-input:focus {
	outline: none;
	border-color: rgba(255,255,255,0.4);
	}

	.task-edit-input.completed {
	text-decoration: line-through;
	opacity: 0.7;
	}

	.task-info {
	opacity: 0.7;
	font-size: 0.9rem;
	min-width: 40px;
	transition: opacity 0.2s ease;
	}

	.task-item:hover .task-info {
	opacity: 0;
	}

	.task-actions {
	opacity: 0;
	transition: opacity 0.2s ease;
	min-width: 80px;
	display: flex;
	gap: 4px;
	justify-content: flex-end;
	}

	.task-item:hover .task-actions {
	opacity: 1;
	}

	.task-btn {
	background: rgba(255,255,255,0.1);
	border: none;
	color: white;
	padding: 4px 6px;
	border-radius: 4px;
	cursor: pointer;
	font-size: 0.8rem;
	transition: all 0.2s ease;
	min-width: 24px;
	}

	.task-btn:hover {
	background: rgba(255,255,255,0.2);
	}

	.add-task-section {
	margin-top: 16px;
	text-align: center;
	}

	.add-task-btn {
	background: rgba(33, 150, 243, 0.3);
	border: 1px solid rgba(33, 150, 243, 0.5);
	color: white;
	padding: 12px 24px;
	border-radius: 8px;
	cursor: pointer;
	font-size: 1rem;
	transition: all 0.3s ease;
	}

	.add-task-btn:hover {
	background: rgba(33, 150, 243, 0.4);
	transform: translateY(-1px);
	}
</style>

@code {
	private List<TaskItem>? tasks;
	private TaskItem? activeTask => tasks?.FirstOrDefault(t => t.IsActiveTask && !t.IsDone);
	[Parameter]
	public EventCallback OnResetPomodoros { get; set; }

	private int? editingTaskId;
	private bool showMenu;
	private bool hideTasks = false;

	protected override async Task OnInitializedAsync()
	{
		tasks = await TaskService.GetAllAsync();
	}

	private void ToggleMenu() => showMenu = !showMenu;
	private void HideTasks() => hideTasks = !hideTasks;

	private void ClearFinished()
	{
		foreach (var task in tasks!.Where(t => t.IsDone).ToList())
		{
			_ = TaskService.DeleteAsync(task.TaskItemId);
			tasks.Remove(task);
		}
		showMenu = false;
	}

	private void ClearAll()
	{
		foreach (var task in tasks!.ToList())
		{
			_ = TaskService.DeleteAsync(task.TaskItemId);
		}
		tasks!.Clear();
		showMenu = false;
	}

	private async Task AddTask()
	{
		var newTask = new TaskItem
			{
				Name = "New Task"/*, ProjectId = 1*/};
		var created = await TaskService.CreateAsync(newTask);

		if (created != null)
		{
			tasks!.Add(created);
			editingTaskId = created.TaskItemId;
			StateHasChanged();
		}
	}

	private async Task SetActiveTask(int taskId)
	{
		var task = tasks!.FirstOrDefault(t => t.TaskItemId == taskId);
		if (task == null || task.IsDone) return;

		foreach (var t in tasks!.ToList())
		{
			if (t.IsActiveTask)
			{
				t.IsActiveTask = false;
				await TaskService.UpdateAsync(t);
			}
		}

		task.IsActiveTask = true;
		await TaskService.UpdateAsync(task);

		StateHasChanged();
	}

	private void FinishTask(int taskId)
	{
		var task = tasks!.FirstOrDefault(t => t.TaskItemId == taskId);

		if (task != null)
		{
			task.IsDone = !task.IsDone;
			_ = TaskService.UpdateAsync(task);
		}
	}

	private void StartEdit(int taskId) => editingTaskId = taskId;

	private async Task FinishEdit(TaskItem task)
	{
		editingTaskId = null;

		if (string.IsNullOrWhiteSpace(task.Name))
		{
			await Delete(task.TaskItemId);
			return;
		}

		await TaskService.UpdateAsync(task);
	}

	private async Task Delete(int taskItemId)
	{
		var success = await TaskService.DeleteAsync(taskItemId);

		if (success)
		{
			tasks!.RemoveAll(t => t.TaskItemId == taskItemId);
		}
	}
}