@using TickTask.Client.Services
@using TickTask.Shared
@inject TaskRepositorye TaskService
@inject TimerService TimerService
@inject IJSRuntime JS
@inject ILogger<TaskList> Logger

<!-- Active Task Section -->
<div class="active-task-section">
	@if (!hideActiveTask)
	{
		<div class="active-task-content" style="min-height:60px">
			@if (ActiveTask != null)
			{
				<div class="active-task-left">
					<div class="section-label">Current task</div>
					<div class="active-task-name">@ActiveTask.Name</div>
				</div>
				<div class="active-task-right" title="Pomodoro progress on current task">
					<div class="task-info-row">
						🍅 @ActiveTask.PomodorosRanOnTask/@ActiveTask.EstimatedNumberOfPomodoros
					</div>
					<div class="task-info-row" title="Your estimated minutes of work left on current task (breaks excluded)">
						⏳ @((((ActiveTask.EstimatedNumberOfPomodoros - ActiveTask.PomodorosRanOnTask - 1) * ActivePomodoro.Duration.TotalMinutes) + ActivePomodoro.RemainingTime.TotalMinutes).ToString("0")) min
					</div>
					<div class="task-info-row" title="The estimated time of current task completion (breaks included)">
						🕒 @TimerService.CalculateEstimatedTimeOfTaskCompletion(ActivePomodoro, ActiveShortBreakTimer, ActiveLongBreakTimer, ActiveTask, TimerSettings)
					</div>
				</div>
			}
			else
			{
				<div class="active-task-left">
					<div class="active-task-name">@(HasMoreTasks() ? "No current task set" : "All done!")</div>
				</div>
			}

		</div>
		<!-- Active Task Check-in-->
		@if (IsOnBreak && ActiveTask != null)
		{
			<div class="checkin-container">
				<div class="question-label">How is it going?</div>
				<div class="checkin-buttons">
					<button class="checkin-btn on-time" @onclick="HandleOnTime">
						<div class="btn-icon">👍</div>
						<div class="btn-text">
							<div class="btn-title">I'll have it done on time (Around @TimerService.CalculateEstimatedTimeOfTaskCompletion(ActivePomodoro, ActiveShortBreakTimer, ActiveLongBreakTimer, ActiveTask, TimerSettings))</div>
						</div>
					</button>
					<button class="checkin-btn need-time" @onclick="HandleNeedMoreTime">
						<div class="btn-icon">⏰</div>
						<div class="btn-text">
							<div class="btn-title">I need more time (Add @((int)ActivePomodoro.Duration.TotalMinutes) min)</div>
						</div>
					</button>
					<button class="checkin-btn task-done" @onclick="HandleTaskDone">
						<div class="btn-icon">✅</div>
						<div class="btn-text">
							<div class="btn-title">I'm done with this task (Mark done & move to next)</div>
						</div>
					</button>
				</div>
			</div>
		}
	}
</div>

<!-- Tasks Section -->
<div class="tasks-section">
	@if (!IsOnBreak)
	{
		<div class="tasks-header">
			<div class="section-label">Tasks</div>
			<button class="menu-btn" @onclick="ToggleMenu">⋮</button>
		</div>
	}

	<!-- Popup menu -->
	@if (showMenu)
	{
		<div class="menu-popup" @onclick="() => showMenu = false">
			<button class="menu-item" @onclick="ClearFinished">Clear finished tasks</button>
			<button class="menu-item" @onclick="ConfirmClearAll">Clear all tasks</button>
			<button class="menu-item" @onclick="HideActiveTask">@(hideActiveTask ? "Show active task" : "Hide active task")</button>
			<button class="menu-item" @onclick="HideTasks">@(hideTasks ? "Show tasks" : "Hide tasks")</button>
			<button class="menu-item" @onclick="OnResetPomodoros">Reset Pomodoro</button>
		</div>
	}

	@if (tasks == null)
	{
		<div class="loading">Loading tasks...</div>
	}
	else if (hideTasks)
	{
		<div class="tasks-hidden">Tasks are hidden.</div>
	}
	else if (IsOnBreak)
	{
		<div class="section-label">@(GetBreakText() == "" ? "Take a break!" : "Reminder")</div>

		<div class="break-screen">
			<div class="break-message">
				@if (GetBreakText() == "")
				{
					<div class="break-icon">🌴</div>
				}
				else
				{
					<p class="break-text">@GetBreakText()</p>
				}
			</div>
		</div>
	}
	else
	{
		<!-- Tasks display -->
		@for (int i = 0; i < tasks.Count; i++)
		{
			var task = tasks[i];
			var index = i;

			<div class="task-wrapper"
				 @ondragover="(e) => OnDragOver(e, index)"
			@ondragover:preventDefault
				 @ondrop="(e) => OnDrop(e, index)"
			@ondrop:preventDefault
				 @ondragleave="OnDragLeave">

				<!-- Drop indicator line -->
				<div class="drop-indicator @(dropIndicatorIndex == index ? "visible" : "")"></div>

				<!-- Original task item -->
						<div class="task-item @(ActiveTaskId == task.TaskItemId ? "active" : "") @(task.IsDone ? "completed" : "") @(draggedTaskIndex == index ? "dragging" : "")"
					 draggable="true"
					 @ondragstart="(e) => OnDragStart(e, index)"
					 @ondragend="OnDragEnd"
					 @onclick="() => SetActiveTask(task.TaskItemId)"
					 @onwheel="(e) => AdjustEstimatedPomodoros(task.TaskItemId, e.DeltaY)"
					 @onwheel:preventDefault="true">

					<input type="checkbox"
						   class="task-checkbox"
						   checked="@task.IsDone"
						   @onclick="() => FinishTask(task.TaskItemId)"
						   @onclick:stopPropagation="true" />

					<div class="task-info">
						<span class="task-progress">@task.PomodorosRanOnTask/@task.EstimatedNumberOfPomodoros</span>
					</div>

					@if (editingTaskId == task.TaskItemId)
					{
						<input class="task-edit-input @(task.IsDone ? "completed" : "")"
							   @bind="task.Name"
							   @bind:event="oninput"
							   @onblur="() => FinishEdit(task)"
							   @onclick:stopPropagation="true"
							   placeholder="Edit task..." />
					}
					else
					{
						<span class="task-name @(task.IsDone ? "completed" : "")">@task.Name</span>
					}

					<div class="task-actions">
						<button class="task-btn" @onclick="() => StartEdit(task.TaskItemId)" @onclick:stopPropagation="true">✎</button>
						<button class="task-btn" @onclick="() => DeleteTask(task.TaskItemId)" @onclick:stopPropagation="true">❌</button>
						<button class="task-btn" @onclick:stopPropagation="true">⋯</button>
					</div>
				</div>
			</div>

		}

		<!-- Final drop zone for bottom -->
		<div class="task-wrapper bottom-drop-zone @(IsDragging ? "active" : "")"
			 @ondragover="(e) => OnDragOver(e, tasks.Count)"
		@ondragover:preventDefault
			 @ondrop="(e) => OnDrop(e, tasks.Count)"
		@ondrop:preventDefault
			 @ondragleave="OnDragLeave">

			<div class="drop-indicator @(dropIndicatorIndex == tasks.Count ? "visible" : "")"></div>
		</div>

		<div class="add-task-section">
			<button class="add-task-btn" @onclick="AddTask">Add Task</button>
		</div>

	}
</div>

@code {
	private bool IsDragging;
	private int? draggedTaskIndex;
	private int? dropIndicatorIndex;

	private void OnDragStart(DragEventArgs e, int index)
	{
		draggedTaskIndex = index;
		IsDragging = true;
		StateHasChanged();
	}

	private void OnDragEnd(DragEventArgs e)
	{
		draggedTaskIndex = null;
		dropIndicatorIndex = null;
		IsDragging = false;
		StateHasChanged();
	}

	private void OnDragLeave(DragEventArgs e)
	{
		dropIndicatorIndex = null;
		StateHasChanged();
	}

	private void OnDragOver(DragEventArgs e, int index)
	{
		e.DataTransfer.DropEffect = "move";

		if (draggedTaskIndex.HasValue && draggedTaskIndex != index)
		{
			dropIndicatorIndex = index;
			StateHasChanged();
		}
	}

	private async Task OnDrop(DragEventArgs e, int dropIndex)
	{
		if (draggedTaskIndex.HasValue && draggedTaskIndex != dropIndex)
		{
			await ReorderTasks(draggedTaskIndex.Value, dropIndex);
		}

		draggedTaskIndex = null;
		dropIndicatorIndex = null;
		StateHasChanged();
	}


	private async Task ReorderTasks(int fromIndex, int toIndex)
	{
		if (fromIndex < 0 || fromIndex >= tasks.Count || toIndex < 0 || toIndex > tasks.Count)
			return;

		var draggedTask = tasks[fromIndex];
		tasks.RemoveAt(fromIndex);

		if (toIndex > fromIndex)
			toIndex--;

		// Allow insert at end
		if (toIndex >= tasks.Count)
			tasks.Add(draggedTask);
		else
			tasks.Insert(toIndex, draggedTask);

		StateHasChanged();
	}



	[Parameter] public CountdownTimer CurrentTimer { get; set; } = default!;
	[Parameter] public PomodoroTimer ActivePomodoro { get; set; } = default!;
	[Parameter] public ShortBreakTimer ActiveShortBreakTimer { get; set; } = default!;
	[Parameter] public LongBreakTimer ActiveLongBreakTimer { get; set; } = default!;
	[Parameter] public EventCallback OnResetPomodoros { get; set; }
	[Parameter] public TimerSettings TimerSettings { get; set; } = default!;

	private List<TaskItem>? tasks = new();
	private TaskItem? activeTask;
	private int? ActiveTaskId => tasks.FirstOrDefault(t => t.IsActiveTask)?.TaskItemId;
	private int? editingTaskId;

	private bool showMenu;
	private bool hideTasks = false;
	private bool hideActiveTask = false;
	private bool IsOnBreak => CurrentTimer is ShortBreakTimer or LongBreakTimer;
	private string GetBreakText() => CurrentTimer?.Text ?? (CurrentTimer is ShortBreakTimer ? ActiveShortBreakTimer.Text : ActiveLongBreakTimer.Text);

	public bool AreAllTasksDone = false;
	public bool ShouldPlaySoundAfterAllTasksDone = false;

	public TaskItem? ActiveTask
	{
		get => activeTask;
		set
		{
			activeTask = value;
			StateHasChanged();
		}
	}

	protected override async Task OnInitializedAsync()
	{
		tasks = await TaskService.GetAllAsync();
		await SetNextAvailableTaskIfNoneActive();

		ShouldPlaySoundAfterAllTasksDone = HasMoreTasks();
	}

	private void ToggleMenu() => showMenu = !showMenu;

	private void HideTasks() => hideTasks = !hideTasks;
	private void HideActiveTask() => hideActiveTask = !hideActiveTask;

	public bool HasMoreTasks() => tasks?.Any(t => !t.IsDone) == true;

	public async Task IncrementActivePomodoroCount()
	{
		if (ActiveTask == null) return;

		ActiveTask.PomodorosRanOnTask++;
		await TaskService.UpdateAsync(ActiveTask);

		bool isTaskDone = ActiveTask.PomodorosRanOnTask >= ActiveTask.EstimatedNumberOfPomodoros;

		if (isTaskDone)
		{
			if (TimerSettings.AutomaticallyMarkDoneTasks)
			{
				ActiveTask.IsDone = true;
				await TaskService.UpdateAsync(ActiveTask);
			}

			if (TimerSettings.AutomaticallyClearDoneTasks)
				await DeleteTask(ActiveTask.TaskItemId);

			if (TimerSettings.AutomaticallyProceedToNextTaskAfterDone)
				SetNextTaskAsActive();
		}

		StateHasChanged();
	}

	public async Task SetNextAvailableTaskIfNoneActive()
	{
		if (ActiveTask == null && HasMoreTasks())
		{
			var nextTask = tasks.FirstOrDefault(t => !t.IsDone);
			if (nextTask != null)
			{
				nextTask.IsActiveTask = true;
				await TaskService.UpdateAsync(nextTask);
				ActiveTask = nextTask;
				StateHasChanged();
			}
		}
	}

	public async void SetNextTaskAsActive()
	{
		if (ActiveTask != null)
		{
			ActiveTask.IsActiveTask = false;
			await TaskService.UpdateAsync(ActiveTask);
		}

		if (HasMoreTasks())
		{
			var nextTask = await GetNextTask();
			if (nextTask != null)
			{
				nextTask.IsActiveTask = true;
				await TaskService.UpdateAsync(nextTask);
				ActiveTask = nextTask;
			}
			else
			{
				ActiveTask = null;
			}
		}
		else
		{
			ActiveTask = null;
		}
	}

	public async Task<TaskItem?>GetNextTask()
	{
		var nextTask = tasks?.FirstOrDefault(t => !t.IsDone && !t.IsActiveTask);

		// var currentIndex = tasks!.FindIndex(t => t.TaskItemId == ActiveTask?.TaskItemId);
		// var nextTask = tasks!.Skip(currentIndex + 1).FirstOrDefault(t => !t.IsDone);

		if (nextTask != null)
		{
			await SetActiveTask(nextTask.TaskItemId);
			return nextTask;
		}
		return null;
	}


	private async Task ConfirmClearAll()
	{
		bool confirmed = await JS.InvokeAsync<bool>
			("confirm", "Are you sure you want to clear all tasks? This cannot be undone.");

		if (confirmed)
		{
			ClearAll();
		}
	}

	private void ClearFinished()
	{
		foreach (var task in tasks!.Where(t => t.IsDone).ToList())
		{
			_ = TaskService.DeleteAsync(task.TaskItemId);
			tasks.Remove(task);
		}
	}

	private void ClearAll()
	{
		foreach (var task in tasks!.ToList())
		{
			_ = TaskService.DeleteAsync(task.TaskItemId);
		}
		tasks!.Clear();
	}

	private async Task AddTask()
	{
		var newTask = new TaskItem
			{
				Name = "New Task"/*, ProjectId = 1*/
			};
		var created = await TaskService.CreateAsync(newTask);

		if (created != null)
		{
			tasks!.Add(created);
			editingTaskId = created.TaskItemId;

			ShouldPlaySoundAfterAllTasksDone = true;
			StateHasChanged();
		}
	}

	private async Task SetActiveTask(int taskId)
	{
		var clickedTask = tasks.FirstOrDefault(t => t.TaskItemId == taskId);
		if (clickedTask == null || clickedTask.IsDone)
			return;

		foreach (var t in tasks)
			t.IsActiveTask = false;

		ActiveTask = clickedTask;
		clickedTask.IsActiveTask = true;
		await TaskService.UpdateAsync(clickedTask);
		StateHasChanged();
	}

	private void FinishTask(int taskId)
	{
		var task = tasks!.FirstOrDefault(t => t.TaskItemId == taskId);

		if (task != null)
		{
			task.IsDone = !task.IsDone;
			_ = TaskService.UpdateAsync(task);
		}
	}

	private void StartEdit(int taskId) => editingTaskId = taskId;

	private async Task FinishEdit(TaskItem task)
	{
		editingTaskId = null;

		if (string.IsNullOrWhiteSpace(task.Name))
		{
			await DeleteTask(task.TaskItemId);
			return;
		}

		await TaskService.UpdateAsync(task);
	}

	private async Task DeleteTask(int taskItemId)
	{
		var success = await TaskService.DeleteAsync(taskItemId);

		if (success)
		{
			activeTask = null;

			tasks!.RemoveAll(t => t.TaskItemId == taskItemId);
		}
	}

	private async Task HandleOnTime()
	{
		// positive effect to mark task as on time ? toggle other buttons when one is selected?
		await JS.InvokeVoidAsync("playClickSound");
	}

	private async Task HandleNeedMoreTime()
	{
		if (ActiveTask != null)
		{
			ActiveTask.EstimatedNumberOfPomodoros++;
			await TaskService.UpdateAsync(ActiveTask);
			StateHasChanged();
		}
		await JS.InvokeVoidAsync("playClickSound");
	}

	private async Task HandleTaskDone()
	{
		if (ActiveTask != null)
		{
			ActiveTask.IsDone = true;
			await TaskService.UpdateAsync(ActiveTask);
			SetNextTaskAsActive();
		}

		await JS.InvokeVoidAsync("playClickSound");

		if (HasMoreTasks() == false)
		{
			await JS.InvokeVoidAsync("playTasksDoneSound");
			ShouldPlaySoundAfterAllTasksDone = false;
		}
	}

	private async Task AdjustEstimatedPomodoros(int taskId, double deltaY)
	{
		var task = tasks!.FirstOrDefault(t => t.TaskItemId == taskId);
		if (task == null) return;

		int change = deltaY < 0 ? 1 : -1;
		int newValue = Math.Max(1, task.EstimatedNumberOfPomodoros + change);

		if (newValue != task.EstimatedNumberOfPomodoros)
		{
			if (newValue <= task.PomodorosRanOnTask)
			{
				task.IsDone = true;
				if (HasMoreTasks() == false)
					ShouldPlaySoundAfterAllTasksDone = false;
			}
			if (newValue > task.PomodorosRanOnTask)
			{
				task.IsDone = false;
				ShouldPlaySoundAfterAllTasksDone = true;
			}

			task.EstimatedNumberOfPomodoros = newValue;
			await TaskService.UpdateAsync(task);
			StateHasChanged();
		}
	}
}
