@page "/login"
@using Blazored.LocalStorage
@using TickTask.Shared.Data.ViewModels
@inject HttpClient Http
@inject NavigationManager Nav
@inject ILocalStorageService LocalStorage
@inject JwtAuthenticationStateProvider AuthProvider

<div class="modal-overlay" @onclick="CloseModal">
    <div class="login-modal" @onclick:stopPropagation>
        @if (!string.IsNullOrEmpty(Error))
        {
            <p class="login-error">@Error</p>
        }
        <input placeholder="Email" @bind="Email" />
        <input type="password" placeholder="Password" @bind="Password" />
        <button class="auth-btn" @onclick="UserLogin">Login</button>
    </div>
</div>

@code {
    private string Email;
    private string Password;
    private string Error;

    private void CloseModal()
    {
        Nav.NavigateTo("/", forceLoad: false);
    }

    private async Task UserLogin()
    {
        Error = null;
        var loginData = new { emailAddress = Email, password = Password };

        try
        {
            var response = await Http.PostAsJsonAsync("api/authentication/login-user", loginData);
            if (!response.IsSuccessStatusCode)
            {
                Error = "Invalid credentials";
                return;
            }

            var authResponse = await response.Content.ReadFromJsonAsync<AuthResponse>();
            if (authResponse != null && authResponse.IsSuccess)
            {
                await LocalStorage.SetItemAsync("authToken", authResponse.Token);
                await LocalStorage.SetItemAsync("refreshToken", authResponse.RefreshToken);
                AuthProvider.MarkUserAsAuthenticated(authResponse.Token);
                Nav.NavigateTo("/", forceLoad: true);
            }
            else
            {
                Error = authResponse?.Error ?? "Login failed";
            }
        }
        catch (Exception ex)
        {
            Error = ex.Message;
        }
    }
}

<style>
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background: rgba(0,0,0,0.5); /* semi-transparent so app is visible behind */
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .login-modal {
        background: #1e1e1e; /* dark theme to float over the app */
        color: white;
        padding: 1.8rem;
        border-radius: 10px;
        width: 320px;
        max-width: 90%;
        display: flex;
        flex-direction: column;
        gap: 1rem;
        box-shadow: 0 8px 30px rgba(0,0,0,0.6);
    }

        .login-modal input {
            padding: 0.6rem;
            border-radius: 6px;
            border: 1px solid #444;
            background-color: #121212;
            color: white;
            width: 100%;
            box-sizing: border-box;
        }

    .login-error {
        color: #e74c3c;
        font-size: 0.9rem;
        margin: 0;
        text-align: center;
    }

    .auth-btn {
        background-color: #4cd137;
        color: black;
        border: none;
        padding: 8px 16px;
        font-size: 0.95rem;
        border-radius: 6px;
        cursor: pointer;
        transition: background-color 0.3s, transform 0.2s;
    }

        .auth-btn:hover {
            background-color: #3ab231;
            transform: translateY(-1px);
        }
</style>
